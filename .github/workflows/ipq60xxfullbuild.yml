name: IPQ60XX-Multi-Stage-Build

on:
  workflow_dispatch:
  workflow_call:

env:
  # 基础配置
  TZ: Asia/Shanghai
  OPENWRT_PATH: /mnt/openwrt
  
  # 仓库配置 - 使用变量以便扩展
  CONFIG_BASE_DIR: configs
  DIY_SCRIPT_DIR: scripts
  
  # 构建配置
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: false
  
  # 缓存配置 - 移除日期，提高缓存命中率
  CACHE_VERSION: v2
  
  # 日志配置
  LOG_LEVEL: INFO
  LOG_FILE: build.log
  REPORT_FILE: build_report.json

jobs:
  # 阶段1: 并行编译3个分支的基础环境
  Build-Base:
    name: 构建基础环境
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        repo_config: 
          - immwrt
          - openwrt
          - libwrt
        chip_family:
          - ipq60xx
      max-parallel: 3
    
    env:
      CHIP_FAMILY: ${{ matrix.chip_family }}
      REPO_CONFIG: ${{ matrix.repo_config }}
      BUILD_ID: ${{ github.run_id }}-${{ matrix.repo_config }}-${{ matrix.chip_family }}-base
      GH_TOKEN: ${{ github.token }}
      
    steps:
      # 检出代码
      - name: 检出代码
        uses: actions/checkout@v4

      # 设置Python环境
      - name: 设置Python环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            setup.py

      # 设置Java环境
      - name: 设置Java环境
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'
          cache-dependency-path: |
            build.gradle
            **/*.gradle
            **/gradle-wrapper.properties

      # 缓存系统环境
      - name: 缓存系统环境
        id: cache_env
        uses: actions/cache@v4
        with:
          key: ${{ env.CACHE_VERSION }}-env-ubuntu-22.04-${{ runner.os }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-env-ubuntu-22.04-
            ${{ env.CCACHE_VERSION }}-env-
          path: |
            /usr/local/bin
            /usr/local/lib
            ~/.cache
            ~/.local
            !/usr/local/lib/android
            !/usr/local/share/android

      # 初始化日志系统
      - name: 初始化日志系统
        run: |
          source scripts/logger.sh
          init_logger "$BUILD_ID"

      # 初始化系统环境
      - name: 初始化系统环境
        run: |
          if [ "${{ steps.cache_env.outputs.cache-hit }}" == "true" ]; then
            export USE_CACHE_ENV=true
          else
            export USE_CACHE_ENV=false
          fi
          
          source scripts/env-init.sh
          init_environment

      # 读取仓库配置
      - name: 读取仓库配置信息
        run: |
          source scripts/repo-config.sh
          read_repo_config "$REPO_CONFIG"

      # 克隆源代码
      - name: 克隆OpenWrt源代码
        run: |
          source scripts/source-clone.sh
          clone_source "$REPO_URL" "$REPO_BRANCH"

      # 生成构建变量
      - name: 生成构建变量
        run: |
          source scripts/vars-generator.sh
          generate_variables "$CHIP_FAMILY" "$REPO_SHORT" "$REPO_URL"

      # 设置缓存键
      - name: 设置缓存键
        run: |
          source scripts/cache-manager.sh
          setup_caches "$SOURCE_REPO" "$REPO_BRANCH" "$DEVICE_TARGET" "$DEVICE_SUBTARGET" "$FEEDS_HASH"

      # 缓存编译工具链
      - name: 缓存编译工具链
        id: cache_toolchain
        uses: actions/cache@v4
        with:
          key: ${{ env.TOOLCHAIN_KEY }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-toolchain-${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-
            ${{ env.CACHE_VERSION }}-toolchain-${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-
            ${{ env.CACHE_VERSION }}-toolchain-${{ env.SOURCE_REPO }}-
            ${{ env.CACHE_VERSION }}-toolchain-
          path: |
            ${{ env.OPENWRT_PATH }}/.ccache
            ${{ env.OPENWRT_PATH }}/staging_dir

      # 缓存软件源索引
      - name: 缓存软件源索引
        id: cache_feeds
        uses: actions/cache@v4
        with:
          key: ${{ env.FEEDS_KEY }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-feeds-${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-
            ${{ env.CACHE_VERSION }}-feeds-${{ env.SOURCE_REPO }}-
            ${{ env.CACHE_VERSION }}-feeds-
          path: |
            ${{ env.OPENWRT_PATH }}/feeds
            ${{ env.OPENWRT_PATH }}/dl
            ${{ env.OPENWRT_PATH }}/package/feeds

      # 缓存下载的软件包
      - name: 缓存下载的软件包
        id: cache_dl
        uses: actions/cache@v4
        with:
          key: ${{ env.DL_KEY }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-dl-${{ env.SOURCE_REPO }}-
            ${{ env.CACHE_VERSION }}-dl-
          path: |
            ${{ env.OPENWRT_PATH }}/dl

      # 检查缓存状态
      - name: 检查缓存状态
        run: |
          source scripts/cache-manager.sh
          check_cache_status "${{ steps.cache_toolchain.outputs.cache-hit }}" "${{ steps.cache_feeds.outputs.cache-hit }}" "${{ steps.cache_dl.outputs.cache-hit }}"

      # 更新缓存时间戳
      - name: 更新缓存时间戳
        run: |
          source "$LOGGER_SCRIPT"
          step_start "REFRESH_CACHE" "更新缓存时间戳"
          
          if [ -d "$OPENWRT_PATH/staging_dir" ]; then
              log "INFO" "更新staging_dir时间戳..."
              find "$OPENWRT_PATH/staging_dir" -type d -name "stamp" -not -path "*target*" -exec touch {} \; 2>/dev/null || true
              log "缓存时间戳更新完成"
          else
              log "WARN" "未找到staging_dir，跳过更新"
          fi
          
          step_complete "REFRESH_CACHE" "success"

      # 添加第三方软件源
      - name: 添加第三方软件源
        run: |
          source "$LOGGER_SCRIPT"
          source "${GITHUB_WORKSPACE}/scripts/common.sh"
          execute_custom_script "$REPO_SCRIPT" "软件源"

      # 安装软件源到构建系统
      - name: 安装软件源到构建系统
        run: |
          source scripts/feeds-installer.sh
          install_feeds "${{ steps.cache_feeds.outputs.cache-hit }}"

      # 应用自定义配置
      - name: 应用自定义配置
        run: |
          source "$LOGGER_SCRIPT"
          source "${GITHUB_WORKSPACE}/scripts/common.sh"
          execute_custom_script "$DIY_SCRIPT" "自定义"

      # 合并配置文件
      - name: 合并配置文件
        run: |
          source scripts/config-merger.sh
          merge_configs "$CONFIG_BASE" "$CONFIG_BRANCH"

      # 下载所有软件包源码
      - name: 下载所有软件包源码
        run: |
          source scripts/builder.sh
          download_packages

      # 清理临时文件
      - name: 清理临时文件
        run: |
          source scripts/builder.sh
          clean_environment

      # 智能编译基础固件
      - name: 智能编译基础固件
        id: compile
        run: |
          source scripts/smart-compile.sh
          smart_compile "" "基础固件"

      # 生成构建报告
      - name: 生成构建报告
        if: always()
        run: |
          source scripts/reporter.sh
          generate_report "${{ steps.compile.outputs.status }}" "$BUILD_ID"

      # 检查磁盘空间使用情况
      - name: 检查磁盘空间使用情况
        if: (!cancelled())
        run: |
          source "$LOGGER_SCRIPT"
          log "INFO" "=== 磁盘空间使用情况 ==="
          df -hT $GITHUB_WORKSPACE | tail -1
          
          if [ -d "$OPENWRT_PATH/bin" ]; then
            bin_size=$(du -sh "$OPENWRT_PATH/bin" 2>/dev/null | cut -f1)
            log "bin目录大小: $bin_size"
          fi

      # 上传构建日志和报告
      - name: 上传构建日志和报告
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SOURCE_REPO }}-logs-${{ env.CHIP_FAMILY }}-${{ env.REPO_SHORT }}-${{ env.FILE_DATE }}-${{ github.run_id }}-${{ github.run_attempt }}
          path: |
            ${{ github.workspace }}/build.log
            ${{ github.workspace }}/build_report.json
            ${{ github.workspace }}/build_summary.txt
            ${{ github.workspace }}/luci_report.md
            ${{ github.workspace }}/luci_defconfig_report.md
            ${{ github.workspace }}/error_*.log
          retention-days: 30

      # 上传编译完成的固件
      - name: 上传编译完成的固件
        if: steps.compile.outputs.status == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SOURCE_REPO }}-base-${{ env.CHIP_FAMILY }}-${{ env.REPO_SHORT }}-${{ env.FILE_DATE }}-${{ github.run_id }}-${{ github.run_attempt }}
          path: |
            ${{ env.OPENWRT_PATH }}/bin
            ${{ env.OPENWRT_PATH }}/.config
          retention-days: 30

  # 阶段2: 并行编译3个分支的Ultra变体配置
  Build-Ultra:
    name: 构建Ultra变体
    needs: Build-Base
    runs-on: ubuntu-22.0.04
    strategy:
      matrix:
        repo_config: 
          - immwrt
          - openwrt
          - 智能编译模式: [parallel, sequential]
        chip_family:
          - ipq60xx
      max-parallel: 3
    
    env:
      CHIP_FAMILY: ${{ matrix.chip_family }}
      REPO_CONFIG: ${{ matrix.repo_config }}
      VARIANT_CONFIG: Ultra
      BUILD_ID: ${{ github.run_id }}-${{ matrix.repo_config }}-${{ matrix.chip_family }}-ultra
      GH_TOKEN: ${{ github.token }}
      
    steps:
      # 检出代码
      - name: 智出代码
        uses: actions/checkout@v4

      # 设置Python环境
      - name: 设置Python环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            setup.py

      # 设置Java环境
      - name: 设置Java环境
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'
          cache-dependency-path: |
            build.gradle
            **/*.gradle
            **/gradle-wrapper.properties

      # 缓存系统环境
      - name: 缓存系统环境
        id: cache_env
        uses: actions/cache@v4
        with:
          key: ${{ env.CACHE_VERSION }}-env-ubuntu-22.04-${{ runner.os }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-env-ubuntu-22.04-
            ${{ env.CACHE_VERSION }}-env-
          path: |
            /usr/local/bin
            /usr/local/lib
            ~/.cache
            ~/.local
            !/usr/local/lib/android
            !/usr/local/share/android

      # 初始化日志系统
      - name: 初始化日志系统
        run: |
          source scripts/logger.sh
          init_logger "$BUILD_ID"

      # 初始化系统环境
      - name: 初始化系统环境
        run: |
          if [ "${{ steps.cache_env.outputs.cache-hit }}" == "true" ]; then
            export USE_CACHE_ENV=true
          else
            export USE_CACHE_ENV=false
          fi
          
          source scripts/env-init.sh
          init_environment

      #读取仓库配置信息
      - name: 读取仓库配置信息
        run: |
          source scripts/repo-config.sh
          read_repo_config "$REPO_CONFIG"

      # 克隆OpenWrt源代码
      - name: 克隆OpenWrt源代码
        run: |
          source scripts/source-clone.sh
          clone_source "$REPO_URL" "$REPO_BRANCH"

      # 生成构建变量
      - name: 生成构建变量
        run: |
          source scripts/vars-generator.sh
          generate_variables "$CHIP_FAMILY" "$REPO_SHORT" "$REPO_URL"

      # 设置缓存键
      - name: 设置缓存键
        run: |
          source scripts/cache-manager.sh
          setup_caches "$SOURCE_REPO" "$REPO_BRANCH" "$DEVICE_TARGET" "$DEVICE_SUBTARGET" "$FEEDS_HASH"

      # 缓存编译工具链
      - name: 缓存编译工具链
        id: cache_toolchain
        uses: actions/cache@v4
        with:
          key: ${{ env.TOOLCHAIN_KEY }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-toolchain-${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-
            ${{ env.CACHE_VERSION }}-toolchain-${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-
            ${{ env.CACHE_VERSION }}-toolchain-${{ env.SOURCE_REPO }}-
            ${{ env.CACHE_VERSION }}-toolchain-
          path: |
            ${{ env.OPENWRT_PATH }}/.ccache
            ${{ env.OPENWRT_PATH }}/staging_dir

      # 缓存软件源索引
      - name: 缓存软件源索引
        id: cache_feeds
        uses: actions/cache@v4
        with:
          key: ${{ env.FEEDS_KEY }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-feeds-${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-
            ${{ env.CACHE_VERSION }}-feeds-${{ env.SOURCE_REPO }}-
            ${{ env.CACHE_VERSION }}-feeds-
          path: |
            ${{ env.OPENWRT_PATH }}/feeds
            ${{ env.OPENWRT_PATH }}/dl
            ${{ env.OPENWRT_PATH }}/package/feeds

      # 缓存下载的软件包
      - name: 缓存下载的软件包
        id: cache_dl
        uses: actions/cache@v4
        with:
          key: ${{ env.DL_KEY }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-dl-${{ env.SOURCE_REPO }}-
            ${{ env.CACHE_VERSION }}-dl-
          path: |
            ${{ env.OPENWRT_PATH }}/dl

      # 检查缓存状态
      - name: 检查缓存状态
        run: |
          source scripts/cache-manager.sh
          check_cache_status "${{ steps.cache_toolchain.outputs.cache-hit }}" "${{ steps.cache_feeds.outputs.cache-hit }}" "${{ steps.cache_dl.outputs.cache-hit }}"

      # 更新缓存时间戳
      - name: 更新缓存时间戳
        run: |
          source "$LOGGER_SCRIPT"
          step_start "REFRESH_CACHE" "更新缓存时间戳"
          
          if [ -d "$OPENWRT_PATH/staging_dir" ]; then
              log "INFO" "更新staging_dir时间戳..."
              find "$OPENWRT_PATH/staging_dir" -type d -name "stamp" -not -path "*target*" -exec touch {} \; 2>/dev/null || true
              log "缓存时间戳更新完成"
          else
              log "WARN" "未找到staging_dir，跳过更新"
          fi
          
          step_complete "REFRESH_CACHE" "success"

      # 添加第三方软件源
      - name: 添加第三方软件源
        run: |
          source "$LOGGER_SCRIPT"
          source "${GITHUB_WORKSPACE}/scripts/common.sh"
          execute_custom_script "$REPO_SCRIPT" "软件源"

      # 安装软件源到构建系统
      - name: 安装软件源到构建系统
        run: |
          source scripts/feeds-installer.sh
          install_feeds "${{ steps.cache_feeds.outputs.cache-hit }}"

      # 应用自定义配置
      - name: 应用自定义配置
        run: |
          source "$LOGGER_SCRIPT"
          source "${GITHUB_WORKSPACE}/scripts/common.sh"
          execute_custom_script "$DIY_SCRIPT" "自定义"

      # 合并基础配置和Ultra变体配置
      - name: 合并基础配置和Ultra变体配置
        run: |
          source "$LOGGER_SCRIPT"
          source "${GITHUB_WORKSPACE}/scripts/common.sh"
          source scripts/config-merger.sh
          
          # 查找Ultra配置文件
          CONFIG_VARIANT=$(find_config_file "$VARIANT_CONFIG")
          if [ $? -ne 0 ]; then
              log "ERROR" "${VARIANT_CONFIG}配置文件不存在"
              exit 1
          fi
          
          log "INFO" "${VARIANT_CONFIG}配置文件: $CONFIG_VARIANT"
          echo "CONFIG_VARIANT=$CONFIG_VARIANT" >> $GITHUB_ENV
          
          # 合并基础配置和分支配置
          merge_configs "$CONFIG_BASE" "$CONFIG_BRANCH"
          
          # 保存合并后的配置
          cp "$OPENWRT_PATH/.config" "$OPENWRT_PATH/.config.base"
          
          # 合并基础配置和变体配置
          merge_variant_config "$CONFIG_BASE" "$CONFIG_VARIANT" "$VARIANT_CONFIG"

      # 下载所有软件包源码
      - name: 下载所有软件包源码
        run: |
          source scripts/builder.sh
          download_packages

      # 清理临时文件
      - name: 清理临时文件
        run: |
          source scripts/builder.sh
          clean_environment

      # 智能编译Ultra变体固件
      - name: 智能编译Ultra变体固件
        id: compile
        run: |
          source scripts/smart-compile.sh
          smart_compile "$(grep "^CONFIG_PACKAGE_luci.*=y" "$CONFIG_ULTRA" | sed 's/^CONFIG_PACKAGE_//' | sed 's/=y//' | tr '\n' ' ')" "Ultra变体的Luci软件包"

      # 生成构建报告
      - name: 生成构建报告
        if: always()
        run: |
          source scripts/reporter.sh
          generate_report "${{ steps.compile.outputs.status }}" "$BUILD_ID"

      # 检查磁盘空间使用情况
      - name: 检查磁盘空间使用情况
        if: (!cancelled())
        run: |
          source "$LOGGER_SCRIPT"
          log "INFO" "=== 系统信息 ==="
          df -hT $GITHUB_WORKSPACE | tail -1
          
          if [ -d "$OPENWRT_PATH/bin" ]; then
            bin_size=$(du -sh "$OPENWRT_PATH/bin" 2>/dev/null | cut -f1)
            log "bin目录大小: $bin_size"
          fi

      # 上传构建日志和报告
      - name: 上传构建日志和报告
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SOURCE_REPO }}-${{ env.VARIANT_CONFIG }}-logs-${{ env.CHIP_FAMILY }}-${{ env.REPO_SHORT }}-${{ env.FILE_DATE }}-${{ github.run_id }}-${{ github.run_attempt }}
          path: |
            ${{ github.workspace }}/build.log
            ${{ github.workspace }}/build_report.json
            ${{ github.workspace }}/build_summary.txt
            ${{ github.workspace }}/luci_${{ env.VARIANT_CONFIG }_report.md
            ${{ github.workspace }}/luci_${{ env.VARIANT_CONFIG }_defconfig_report.md
            ${{ github.workspace }}/error_*.log
          retention-days: 30

      # 上传编译完成的固件
      - name: 上传编译完成的固件
        if: steps.compile.outputs.status == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SOURCE_REPO }}-${{ env.VARIANT_CONFIG }}-${{ env.CHIP_FAMILY }}-${{ env.REPO_SHORT }}-${{ env.FILE_DATE }}-${{ github.run_id }}-${{ github.run_attempt }}
          path: |
            ${{ env.OPENWRT_PATH }}/bin
            ${{ env.OPENWRT_PATH }}/.config
          retention-days: 30

  # 阶段3: 并行编译3个分支的Max变体配置
  Build-Max:
    name: 构建Max变体
    needs: Build-Ultra
    runs-on: ubuntu-22.0.04
    strategy:
      matrix:
        repo_config: 
          - immwrt
          - openwrt
          - 智能编译模式: [parallel, sequential]
        chip_family:
          - ipq60xx
      max-parallel: 3
    
    env:
      CHIP_FAMILY: ${{ matrix.chip_family }}
      REPO_CONFIG: ${{ matrix.repo_config }}
      VARIANT_CONFIG: Max
      BUILD_ID: ${{ github.run_id }}-${{ matrix.repo_config }}-${{ matrix.chip_family }}-max
      GH_TOKEN: ${{ github.token }}
      
    steps:
      # 检出代码
      - name: 智出代码
        uses: actions/checkout@v4

      # 设置Python环境
      - name: 设置Python环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            setup.py

      # 设置Java环境
      - name: 设置Java环境
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'
          cache-dependency-path: |
            build.gradle
            **/*.gradle
            **/gradle-wrapper.properties

      # 缓存系统环境
      - name: 缓存系统环境
        id: cache_env
        uses: actions/cache@v4
        with:
          key: ${{ env.CACHE_VERSION }}-env-ubuntu-22.04-${{ runner.os }}
          restore-keys: |
            ${{ env.CCACHE_VERSION }}-env-ubuntu-22.04-
            ${{ env.CACHE_VERSION }}-env-
          path: |
            /usr/local/bin
            /usr/local/lib
            ~/.cache
            ~/.local
            !/usr/local/lib/android
            !/usr/local/share/android

      # 初始化日志系统
      - name: 初始化日志系统
        run: |
          source scripts/logger.sh
          init_logger "$BUILD_ID"

      # 初始化系统环境
      - name: 初始化系统环境
        run: |
          if [ "${{ steps.cache_env.outputs.cache-hit }}" == "true" ]; then
            export USE_CACHE_ENV=true
          else
            export USE_CACHE_ENV=false
          fi
          
          source scripts/env-init.sh
          init_environment

      #读取仓库配置信息
      - name: 读取仓库配置信息
        run: |
          source scripts/repo-config.sh
          read_repo_config "$REPO_CONFIG"

      # 克隆OpenWrt源代码
      - name: 克隆OpenWrt源代码
        run: |
          source scripts/source-clone.sh
          clone_source "$REPO_URL" "$REPO_BRANCH"

      # 生成构建变量
      - name: 生成构建变量
        run: |
          source scripts/vars-generator.sh
          generate_variables "$CHIP_FAMILY" "$REPO_SHORT" "$REPO_URL"

      # 设置缓存键
      - name: 设置缓存键
        run: |
          source scripts/cache-manager.sh
          setup_caches "$SOURCE_REPO" "$REPO_BRANCH" "$DEVICE_TARGET" "$DEVICE_SUBTARGET" "$FEEDS_HASH"

      # 缓存编译工具链
      - name: 缓存编译工具链
        id: cache_toolchain
        uses: actions/cache@v4
        with:
          key: ${{ env.TOOLCHAIN_KEY }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-toolchain-${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-
            ${{ env.CCACHE_VERSION }}-toolchain-${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-
            ${{ env.CACHE_VERSION }}-toolchain-${{ env.SOURCE_REPO }}-
            ${{ env.CACHE_VERSION }}-toolchain-
          path: |
            ${{ env.OPENWRT_PATH }}/.ccache
            ${{ env.OPENWRT_PATH }}/staging_dir

      # 缓存软件源索引
      - name: 缓存软件源索引
        id: cache_feeds
        uses: actions/cache@v4
        with:
          key: ${{ env.FEEDS_KEY }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-feeds-${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-
            ${{ env.CACHE_VERSION }}-feeds-${{ env.SOURCE_REPO }}-
            ${{ env.CCACHE_VERSION }}-feeds-
          path: |
            ${{ env.OPENWRT_PATH }}/feeds
            ${{ env.OPENWRT_PATH }}/dl
            ${{ env.OPENWRT_PATH }}/package/feeds

      # 缓存下载的软件包
      - name: 缓存下载的软件包
        id: cache_dl
        uses: actions/cache@v4
        with:
          key: ${{ env.DL_KEY }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-dl-${{ env.SOURCE_REPO }}-
            ${{ env.CACHE_VERSION }}-dl-
          path: |
            ${{ env.OPENWRT_PATH }}/dl

      # 检查缓存状态
      - name: 检查缓存状态
        run: |
          source scripts/cache-manager.sh
          check_cache_status "${{ steps.cache_toolchain.outputs.cache-hit }}" "${{ steps.cache_feeds.outputs.cache-hit }}" "${{ steps.cache_dl.outputs.cache-hit }}"

      # 更新缓存时间戳
      - name: 更新缓存时间戳
        run: |
          source "$LOGGER_SCRIPT"
          step_start "REFRESH_CACHE" "更新缓存时间戳"
          
          if [ -d "$OPENWRT_PATH/staging_dir" ]; then
              log "INFO" "更新staging_dir时间戳..."
              find "$OPENWRT_PATH/staging_dir" -type d -name "stamp" -not -path "*target*" -exec touch {} \; 2>/dev/null || true
              log "缓存时间戳更新完成"
          else
              log "WARN" "未找到staging_dir，跳过更新"
          fi
          
          step_complete "REFRESH_CACHE" "success"

      # 添加第三方软件源
      - name: 添加第三方软件源
        run: |
          source "$LOGGER_SCRIPT"
          source "${GITHUB_WORKSPACE}/scripts/common.sh"
          execute_custom_script "$REPO_SCRIPT" "软件源"

      # 安装软件源到构建系统
      - name: 安装软件源到构建系统
        run: |
          source scripts/feeds-installer.sh
          install_feeds "${{ steps.cache_feeds.outputs.cache-hit }}"

      # 应用自定义配置
      - name: 应用自定义配置
        run: |
          source "$LOGGER_SCRIPT"
          source "${GITHUB_WORKSPACE}/scripts/common.sh"
          execute_custom_script "$DIY_SCRIPT" "自定义"

      # 合并基础配置和Max变体配置
      - name: 合并基础配置和Max变体配置
        run: |
          source "$LOGGER_SCRIPT"
          source "${GITHUB_WORKSPACE}/scripts/common.sh"
          source scripts/config-merger.sh
          
          # 查找Max配置文件
          CONFIG_VARIANT=$(find_config_file "$VARIANT_CONFIG")
          if [ $? -ne 0 ]; then
              log "ERROR" "${VARIANT_CONFIG}配置文件不存在"
              exit 1
          fi
          
          log "INFO" "${VARIANT_CONFIG}配置文件: $CONFIG_VARIANT"
          echo "CONFIG_VARIANT=$CONFIG_VARIANT" >> $GITHUB_ENV
          
          # 合并基础配置和分支配置
          merge_configs "$CONFIG_BASE" "$CONFIG_BRANCH"
          
          # 保存合并后的配置
          cp "$OPENWRT_PATH/.config" "$OPENWRT_PATH/.config.base"
          
          # 合并基础配置和变体配置
          merge_variant_config "$CONFIG_BASE" "$CONFIG_VARIANT_CONFIG" "$VARIANT_CONFIG"

      # 智能编译Max变体固件
      - name: 智能编译Max变体固件
        id: compile
        run: |
          source scripts/smart-compile.sh
          smart_compile "$(grep "^CONFIG_PACKAGE_luci.*=y" "$CONFIG_MAX" | sed 's/^CONFIG_PACKAGE_//' | sed 's/=y//' | tr '\n' ' ')" "Max变体的Luci软件包"

      # 生成构建报告
      - name: 生成构建报告
        if: always()
        run: |
          source scripts/reporter.sh
          generate_report "${{ steps.compile.outputs.status }}" "$BUILD_ID"

      # 检查磁盘空间使用情况
      - name: 检查磁盘空间使用情况
        if: (!cancelled())
        run: |
          source "$LOGGER_SCRIPT"
          log "INFO" "=== 系统信息 ==="
          df -hT $GITHUB_WORKSPACE | tail -1
          
          if [ -d "$OPENWRT_PATH/bin" ]; then
            bin_size=$(du -sh "$OPENWRT_PATH/bin" 2>/dev/null | cut -f1)
            log "bin目录大小: $bin_size"
          fi

      # 上传构建日志和报告
      - name: 上传构建日志和报告
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SOURCE_REPO }}-${{ env.VARIANT_CONFIG }}-logs-${{ env.CHIP_FAMILY }}-${{ env.REPO_SHORT }}-${{ env.FILE_DATE }}-${{ github.run_id }}-${{ github.run_attempt }}
          path: |
            ${{ github.workspace }}/build.log
            ${{ github.workspace }}/build_report.json
            ${{ github.workspace }}/build_summary.txt
            ${{ github.workspace }}/luci_${{ env.VARIANT_CONFIG }}_report.md
            ${{ github.workspace }}/luci_${{ env.VARIANT_CONFIG }_defconfig_report.md
            ${{ github.workspace }}/error_*.log
          retention-days: 30

      # 上传编译完成的固件
      - name: 上传编译完成的固件
        if: steps.compile.outputs.status == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SOURCE_REPO }}-${{ env.VARIANT_CONFIG }}-${{ env.CHIP_FAMILY }}-${{ env.REPO_SHORT }}-${{ env.FILE_DATE }}-${{ github.run_id }}-${{ github.run_attempt }}
          path: |
            ${{ env.OPENWRT_PATH }}/bin
            ${{ env.OPENWRT_PATH }}/.config
          retention-days: 30

  # 阶段4: 并行编译3个分支的Pro变体配置
  Build-Pro:
    name: 构建Pro变体
    needs: Build-Max
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        repo_config: 
          - immwrt
          - openwrt
          - libwrt
        chip_family:
          - ipq60xx
      max-parallel: 3
    
    env:
      CHIP_FAMILY: ${{ matrix.chip_family }}
      REPO_CONFIG: ${{ matrix.repo_config }}
      VARIANT_CONFIG: Pro
      BUILD_ID: ${{ github.run_id }}-${{ matrix.repo_config }}-${{ matrix.chip_family }}-pro
      GH_TOKEN: ${{ github.token }}
      
    steps:
      # 检出代码
      - name: 检出代码
        uses: actions/checkout@v4

      # 设置Python环境
      - name: 设置Python环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            setup.py

      # 设置Java环境
      - name: 设置Java环境
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'
          cache-dependency-path: |
            build.gradle
            **/*.gradle
            **/gradle-wrapper.properties

      # 缓存系统环境
      - name: 缓存系统环境
        id: cache_env
        uses: actions/cache@v4
        with:
          key: ${{ env.CACHE_VERSION }}-env-ubuntu-22.04-${{ runner.os }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-env-ubuntu-22.04-
            ${{ env.CACHE_VERSION }}-env-
          path: |
            /usr/local/bin
            /usr/local/lib
            ~/.cache
            ~/.local
            !/usr/local/lib/android
            !/usr/local/share/android

      # 初始化日志系统
      - name: 初始化日志系统
        run: |
          source scripts/logger.sh
          init_logger "$BUILD_ID"

      # 初始化系统环境
      - name: 初始化系统环境
        run: |
          if [ "${{ steps.cache_env.outputs.cache-hit }}" == "true" ]; then
            export USE_CACHE_ENV=true
          else
            export USE_CACHE_ENV=false
          fi
          
          source scripts/env-init.sh
          init_environment

      #读取仓库配置信息
      - name: 读取仓库配置信息
        run: |
          source scripts/repo-config.sh
          read_repo_config "$REPO_CONFIG"

      # 克隆源代码
      - name: 克隆源代码
        run: |
          source scripts/source-clone.sh
          clone_source "$REPO_URL" "$REPO_BRANCH"

      # 生成构建变量
      - name: 生成构建变量
        run: |
          source scripts/vars-generator.sh
          generate_variables "$CHIP_FAMILY" "$REPO_SHORT" "$REPO_URL"

      # 设置缓存键
      - name: 设置缓存键
        run: |
          source scripts/cache-manager.sh
          setup_caches "$SOURCE_REPO" "$REPO_BRANCH" "$DEVICE_TARGET" "$DEVICE_SUBTARGET" "$FEEDS_HASH"

      # 缓存编译工具链
      - name: 缓存编译工具链
        id: cache_toolchain
        uses: actions/cache@v4
        with:
          key: ${{ env.TOOLCHAIN_KEY }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-toolchain-${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-
            ${{ env.CACHE_VERSION }}-toolchain-${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-
            ${{ env.CACHE_VERSION }}-toolchain-${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-
            ${{ env.CACHE_VERSION }}-toolchain-${{ env.SOURCE_REPO }}-
            ${{ env.CACHE_VERSION }}-toolchain-
          path: |
            ${{ env.OPENWRT_PATH }}/.ccache
            ${{ env.OPENWRT_PATH }}/staging_dir

      # 缓存软件源索引
      - name: 缓存软件源索引
        id: cache_feeds
        uses: actions/cache@v4
        with:
          key: ${{ env.FEEDS_KEY }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-feeds-${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-
            ${{ env.CACHE_VERSION }}-feeds-${{ env.SOURCE_REPO }}-
            ${{ env.CACHE_VERSION }}-feeds-
          path: |
            ${{ env.OPENWRT_PATH }}/feeds
            ${{ env.OPENWRT_PATH }}/dl
            ${{ env.OPENWRT_PATH }}/package/feeds

      # 缓存下载的软件包
      - name: 缓存下载的软件包
        id: cache_dl
        uses: actions/cache@v4
        with:
          key: ${{ env.DL_KEY }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-dl-${{ env.SOURCE_REPO }}-
            ${{ env.CACHE_VERSION }}-dl-
          path: |
            ${{ env.OPENWRT_PATH }}/dl

      # 检查缓存状态
      - name: 检查缓存状态
        run: |
          source scripts/cache-manager.sh
          check_cache_status "${{ steps.cache_toolchain.outputs.cache-hit }}" "${{ steps.cache_feeds.outputs.cache-hit }}" "${{ steps.cache_dl.outputs.cache-hit }}"

      # 更新缓存时间戳
      - name: 更新缓存时间戳
        run: |
          source "$LOGGER_SCRIPT"
          step_start "REFRESH_CACHE" "更新缓存时间戳"
          
          if [ -d "$OPENWRT_PATH/staging_dir" ]; then
              log "INFO" "更新staging_dir时间戳..."
              find "$OPENWRT_PATH/staging_dir" -type d -name "stamp" -not -path "*target*" -exec touch {} \; 2>/dev/null || true
              log "缓存时间戳更新完成"
          else
              log "WARN" "未找到staging_dir，跳过更新"
          fi
          
          step_complete "REFRESH_CACHE" "success"

      # 添加第三方软件源
      - name: 添加第三方软件源
        run: |
          source "$LOGGER_SCRIPT"
          source "${GITHUB_WORKSPACE}/scripts/common.sh"
          execute_custom_script "$REPO_SCRIPT" "软件源"

      # 安装软件源到构建系统
      - name: 安装软件源到构建系统
        run: |
          source scripts/feeds-installer.sh
          install_feeds "${{ steps.cache_feeds.outputs.cache-hit }}"

      # 应用自定义配置
      - name: 应用自定义配置
        run: |
          source "$LOGGER_SCRIPT"
          source "${GITHUB_WORKSPACE}/scripts/common.sh"
          execute_custom_script "$DIY_SCRIPT" "自定义"

      # 合并基础配置和Pro变体配置
      - name: 合并基础配置和Pro变体配置
        run: |
          source "$LOGGER_SCRIPT"
          source "${GITHUB_WORKSPACE}/scripts/common.sh"
          source scripts/config-merger.sh
          
          # 查找Pro配置文件
          CONFIG_VARIANT=$(find_config_file "$VARIANT_CONFIG")
          if [ $? -ne 0 ]; then
              log "ERROR" "${VARIANT_CONFIG}配置文件不存在"
              exit 1
          fi
          
          log "INFO" "${VARIANT_CONFIG}配置文件: $CONFIG_VARIANT"
          echo "CONFIG_VARIANT=$CONFIG_VARIANT" >> $GITHUB_ENV
          
          # 合并基础配置和分支配置
          merge_configs "$CONFIG_BASE" "$CONFIG_BRANCH"
          
          # 保存合并后的配置
          cp "$OPENWRT_PATH/.config" "$OPENWRT_PATH/.config.base"
          
          # 合并基础配置和变体配置
          merge_variant_config "$CONFIG_BASE" "$CONFIG_VARIANT_CONFIG" "$VARIANT_CONFIG"

      # 智能编译Pro变体固件
      - name: 智能编译Pro变体固件
        id: compile
        run: |
          source scripts/smart-compile.sh
          smart_compile "$(grep "^CONFIG_PACKAGE_luci.*=y" "$CONFIG_MAX" | sed 's/^CONFIG_PACKAGE_//' | sed 's/=y//' | tr '\n' ')" "Max变体的Luci软件包"

      # 生成构建报告
      - name: 生成构建报告
        if: always()
        run: |
          source scripts/reporter.sh
          generate_report "${{ steps.compile.outputs.status }}" "$BUILD_ID"

      # 检查磁盘空间使用情况
      - name: 检查磁盘空间使用情况
        if: (!cancelled())
        run: |
          source "$LOGGER_SCRIPT"
          log "INFO" "=== 系统信息 ==="
          df -hT $GITHUB_WORKSPACE | tail -1
          
          if [ -d "$OPENWRT_PATH/bin" ]; then
            bin_size=$(du -sh "$OPENWRT_PATH/bin" 2>/dev/null | cut -f1)
            log "bin目录大小: $bin_size"
          fi

      # 上传构建日志和报告
      - name: 上传构建日志和报告
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SOURCE_REPO }}-${{ env.VARIANT_CONFIG }}-logs-${{ env.CHIP_FAMILY }}-${{ env.REPO_SHORT }}-${{ env.FILE_DATE }}-${{ github.run_id }}-${{ github.run_attempt }}
          path: |
            ${{ github.workspace }}/build.log
            ${{ github.workspace }}/build_report.json
            ${{ github.workspace }}/build_summary.txt
            ${{ github.workspace }}/luci_${{ env.VARIANT_CONFIG }_report.md
            ${{ github.workspace }}/luci_${{ env.VARIANT_CONFIG }_defconfig_report.md
            ${{ github.workspace }}/error_*.log
          retention-days: 30

      # 上传编译完成的固件
      - name: 上传编译完成的固件
        if: steps.compile.outputs.status == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SOURCE_REPO }}-${{ env.VARIANT_CONFIG }}-${{ env.CHIP_FAMILY }}-${{ env.REPO_SHORT }}-${{ env.FILE_DATE }}-${{ github.run_id }}-${{ github.run_attempt }}
          path: |
            ${{ env.OPENWRT_PATH }}/bin
            ${{ env.OPENWRT_PATH }}/.config
          retention-days: 30
