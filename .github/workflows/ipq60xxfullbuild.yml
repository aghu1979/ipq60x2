name: IPQ60XX-Multi-Stage-Build

on:
  workflow_dispatch:
  workflow_call:

env:
  # 基础配置
  TZ: Asia/Shanghai
  OPENWRT_PATH: /mnt/openwrt
  
  # 仓库配置 - 使用变量以便扩展
  CONFIG_BASE_DIR: configs
  DIY_SCRIPT_DIR: scripts
  
  # 构建配置
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: false  # 根据要求，不需要发布release
  
  # 缓存配置 - 移除日期，提高缓存命中率
  CACHE_VERSION: v2
  
  # 日志配置
  LOG_LEVEL: INFO  # DEBUG, INFO, WARN, ERROR
  LOG_FILE: build.log
  REPORT_FILE: build_report.json

jobs:
  # 阶段1: 并行编译3个分支的基础环境
  Build-Base:
    name: 构建基础环境
    continue-on-error: true
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false  # 关键：不快速失败，让所有任务都执行
      matrix:
        # 定义要并行构建的仓库配置
        repo_config: 
          - immwrt
          - openwrt
          - libwrt
        # 芯片系列
        chip_family:
          - ipq60xx
    
    # 使用环境变量设置芯片系列和仓库配置
    env:
      CHIP_FAMILY: ${{ matrix.chip_family }}
      REPO_CONFIG: ${{ matrix.repo_config }}
      BUILD_ID: ${{ github.run_id }}-${{ matrix.repo_config }}-${{ matrix.chip_family }}-base
      # 设置GitHub CLI token
      GH_TOKEN: ${{ github.token }}
      
    steps:
      # 检出代码
      - name: 检出代码
        continue-on-error: true
        uses: actions/checkout@main

      # 缓存环境
      - name: 缓存环境
        id: cache_env
        continue-on-error: true
        uses: actions/cache@main
        with:
          key: ${{ env.CACHE_VERSION }}-env-ubuntu-22.04
          restore-keys: |
            ${{ env.CACHE_VERSION }}-env-ubuntu-
            ${{ env.CACHE_VERSION }}-env-
          path: |
            /usr/local/bin
            /usr/local/lib
            /usr/lib
            /var/lib/apt
            /var/cache/apt
            /etc/apt

      # 初始化日志系统
      - name: 初始化日志系统
        continue-on-error: true
        run: |
          source scripts/logger.sh
          init_logger "$BUILD_ID"

      # 初始化环境
      - name: 初始化环境
        continue-on-error: true
        run: |
          source scripts/env-init.sh
          init_environment

      # 读取仓库配置
      - name: 读取仓库配置
        continue-on-error: true
        run: |
          source scripts/repo-config.sh
          read_repo_config "$REPO_CONFIG"

      # 克隆源代码
      - name: 克隆源代码
        continue-on-error: true
        run: |
          source scripts/source-clone.sh
          clone_source "$REPO_URL" "$REPO_BRANCH"

      # 生成变量
      - name: 生成变量
        continue-on-error: true
        run: |
          source scripts/vars-generator.sh
          generate_variables "$CHIP_FAMILY" "$REPO_SHORT" "$REPO_URL"

      # 设置缓存
      - name: 设置缓存
        continue-on-error: true
        run: |
          source scripts/cache-manager.sh
          setup_caches "$SOURCE_REPO" "$REPO_BRANCH" "$DEVICE_TARGET" "$DEVICE_SUBTARGET" "$FEEDS_HASH"

      # 缓存工具链
      - name: 缓存工具链
        id: cache_toolchain
        continue-on-error: true
        uses: actions/cache@main
        with:
          key: ${{ env.TOOLCHAIN_KEY }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-toolchain-${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-
            ${{ env.CACHE_VERSION }}-toolchain-${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-
            ${{ env.CACHE_VERSION }}-toolchain-${{ env.SOURCE_REPO }}-
            ${{ env.CACHE_VERSION }}-toolchain-
          path: |
            ${{ env.OPENWRT_PATH }}/.ccache
            ${{ env.OPENWRT_PATH }}/staging_dir

      # 缓存Feeds
      - name: 缓存Feeds
        id: cache_feeds
        continue-on-error: true
        uses: actions/cache@main
        with:
          key: ${{ env.FEEDS_KEY }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-feeds-${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-
            ${{ env.CACHE_VERSION }}-feeds-${{ env.SOURCE_REPO }}-
            ${{ env.CACHE_VERSION }}-feeds-
          path: |
            ${{ env.OPENWRT_PATH }}/feeds
            ${{ env.OPENWRT_PATH }}/dl
            ${{ env.OPENWRT_PATH }}/package/feeds

      # 缓存DL软件包
      - name: 缓存DL软件包
        id: cache_dl
        continue-on-error: true
        uses: actions/cache@main
        with:
          key: ${{ env.DL_KEY }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-dl-${{ env.SOURCE_REPO }}-
            ${{ env.CACHE_VERSION }}-dl-
          path: |
            ${{ env.OPENWRT_PATH }}/dl

      # 检查缓存状态
      - name: 检查缓存状态
        continue-on-error: true
        run: |
          source scripts/cache-manager.sh
          check_cache_status "${{ steps.cache_toolchain.outputs.cache-hit }}" "${{ steps.cache_feeds.outputs.cache-hit }}" "${{ steps.cache_dl.outputs.cache-hit }}"

      # 刷新缓存
      - name: 刷新缓存
        continue-on-error: true
        run: |
          source scripts/cache-manager.sh
          refresh_cache

      # 添加第三方软件源
      - name: 添加第三方软件源
        continue-on-error: true
        run: |
          source "$LOGGER_SCRIPT"
          source "${GITHUB_WORKSPACE}/scripts/common.sh"
          execute_custom_script "$REPO_SCRIPT" "软件源"

      # 安装Feeds
      - name: 安装Feeds
        continue-on-error: true
        run: |
          source scripts/feeds-installer.sh
          install_feeds "${{ steps.cache_feeds.outputs.cache-hit }}"

      # 加载自定义配置
      - name: 加载自定义配置
        continue-on-error: true
        run: |
          source "$LOGGER_SCRIPT"
          source "${GITHUB_WORKSPACE}/scripts/common.sh"
          execute_custom_script "$DIY_SCRIPT" "自定义"

      # 合并配置文件
      - name: 合并配置文件
        continue-on-error: true
        run: |
          source scripts/config-merger.sh
          merge_configs "$CONFIG_BASE" "$CONFIG_BRANCH"

      # 下载软件包
      - name: 下载软件包
        continue-on-error: true
        run: |
          source scripts/builder.sh
          download_packages

      # 清理构建环境
      - name: 清理构建环境
        continue-on-error: true
        run: |
          source scripts/builder.sh
          clean_environment

      # 编译基础环境
      - name: 编译基础环境
        id: compile
        continue-on-error: true
        run: |
          source scripts/builder.sh
          compile_firmware "基础环境"

      # 生成构建报告
      - name: 生成构建报告
        if: always()
        continue-on-error: true
        run: |
          source scripts/reporter.sh
          generate_report "${{ steps.compile.outputs.status }}" "$BUILD_ID"

      # 检查空间使用情况
      - name: 检查空间使用情况
        if: (!cancelled())
        continue-on-error: true
        run: |
          source scripts/reporter.sh
          check_disk_space

      # 上传构建日志和报告
      - name: 上传构建日志和报告
        if: always()
        continue-on-error: true
        uses: actions/upload-artifact@main
        with:
          name: ${{ env.SOURCE_REPO }}-logs-${{ env.CHIP_FAMILY }}-${{ env.REPO_SHORT }}-${{ env.FILE_DATE }}
          path: |
            ${{ github.workspace }}/build.log
            ${{ github.workspace }}/build_report.json
            ${{ github.workspace }}/build_summary.txt
            ${{ github.workspace }}/luci_report.md
            ${{ github.workspace }}/luci_defconfig_report.md
          retention-days: 30

      # 上传基础环境到Artifact
      - name: 上传基础环境到Artifact
        if: steps.compile.outputs.status == 'success'
        continue-on-error: true
        uses: actions/upload-artifact@main
        with:
          name: ${{ env.SOURCE_REPO }}-base-${{ env.CHIP_FAMILY }}-${{ env.REPO_SHORT }}-${{ env.FILE_DATE }}
          path: |
            ${{ env.OPENWRT_PATH }}/bin
            ${{ env.OPENWRT_PATH }}/.config
          retention-days: 30

  # 阶段2: 编译Ultra配置的Luci软件包
  Build-Ultra-Luci:
    name: 编译Ultra配置的Luci软件包
    needs: Build-Base
    continue-on-error: true
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false  # 关键：不快速失败，让所有任务都执行
      matrix:
        # 定义要并行构建的仓库配置
        repo_config: 
          - immwrt
          - openwrt
          - libwrt
        # 芯片系列
        chip_family:
          - ipq60xx
    
    # 使用环境变量设置芯片系列和仓库配置
    env:
      CHIP_FAMILY: ${{ matrix.chip_family }}
      REPO_CONFIG: ${{ matrix.repo_config }}
      BUILD_ID: ${{ github.run_id }}-${{ matrix.repo_config }}-${{ matrix.chip_family }}-ultra-luci
      # 设置GitHub CLI token
      GH_TOKEN: ${{ github.token }}
      
    steps:
      # 检出代码
      - name: 检出代码
        continue-on-error: true
        uses: actions/checkout@main

      # 缓存环境
      - name: 缓存环境
        id: cache_env
        continue-on-error: true
        uses: actions/cache@main
        with:
          key: ${{ env.CACHE_VERSION }}-env-ubuntu-22.04
          restore-keys: |
            ${{ env.CACHE_VERSION }}-env-ubuntu-
            ${{ env.CACHE_VERSION }}-env-
          path: |
            /usr/local/bin
            /usr/local/lib
            /usr/lib
            /var/lib/apt
            /var/cache/apt
            /etc/apt

      # 初始化日志系统
      - name: 初始化日志系统
        continue-on-error: true
        run: |
          source scripts/logger.sh
          init_logger "$BUILD_ID"

      # 初始化环境
      - name: 初始化环境
        continue-on-error: true
        run: |
          source scripts/env-init.sh
          init_environment

      # 读取仓库配置
      - name: 读取仓库配置
        continue-on-error: true
        run: |
          source scripts/repo-config.sh
          read_repo_config "$REPO_CONFIG"

      # 克隆源代码
      - name: 克隆源代码
        continue-on-error: true
        run: |
          source scripts/source-clone.sh
          clone_source "$REPO_URL" "$REPO_BRANCH"

      # 生成变量
      - name: 生成变量
        continue-on-error: true
        run: |
          source scripts/vars-generator.sh
          generate_variables "$CHIP_FAMILY" "$REPO_SHORT" "$REPO_URL"

      # 设置缓存
      - name: 设置缓存
        continue-on-error: true
        run: |
          source scripts/cache-manager.sh
          setup_caches "$SOURCE_REPO" "$REPO_BRANCH" "$DEVICE_TARGET" "$DEVICE_SUBTARGET" "$FEEDS_HASH"

      # 缓存工具链
      - name: 缓存工具链
        id: cache_toolchain
        continue-on-error: true
        uses: actions/cache@main
        with:
          key: ${{ env.TOOLCHAIN_KEY }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-toolchain-${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-
            ${{ env.CACHE_VERSION }}-toolchain-${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-
            ${{ env.CACHE_VERSION }}-toolchain-${{ env.SOURCE_REPO }}-
            ${{ env.CACHE_VERSION }}-toolchain-
          path: |
            ${{ env.OPENWRT_PATH }}/.ccache
            ${{ env.OPENWRT_PATH }}/staging_dir

      # 缓存Feeds
      - name: 缓存Feeds
        id: cache_feeds
        continue-on-error: true
        uses: actions/cache@main
        with:
          key: ${{ env.FEEDS_KEY }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-feeds-${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-
            ${{ env.CACHE_VERSION }}-feeds-${{ env.SOURCE_REPO }}-
            ${{ env.CACHE_VERSION }}-feeds-
          path: |
            ${{ env.OPENWRT_PATH }}/feeds
            ${{ env.OPENWRT_PATH }}/dl
            ${{ env.OPENWRT_PATH }}/package/feeds

      # 缓存DL软件包
      - name: 缓存DL软件包
        id: cache_dl
        continue-on-error: true
        uses: actions/cache@main
        with:
          key: ${{ env.DL_KEY }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-dl-${{ env.SOURCE_REPO }}-
            ${{ env.CACHE_VERSION }}-dl-
          path: |
            ${{ env.OPENWRT_PATH }}/dl

      # 检查缓存状态
      - name: 检查缓存状态
        continue-on-error: true
        run: |
          source scripts/cache-manager.sh
          check_cache_status "${{ steps.cache_toolchain.outputs.cache-hit }}" "${{ steps.cache_feeds.outputs.cache-hit }}" "${{ steps.cache_dl.outputs.cache-hit }}"

      # 刷新缓存
      - name: 刷新缓存
        continue-on-error: true
        run: |
          source scripts/cache-manager.sh
          refresh_cache

      # 添加第三方软件源
      - name: 添加第三方软件源
        continue-on-error: true
        run: |
          source "$LOGGER_SCRIPT"
          source "${GITHUB_WORKSPACE}/scripts/common.sh"
          execute_custom_script "$REPO_SCRIPT" "软件源"

      # 安装Feeds
      - name: 安装Feeds
        continue-on-error: true
        run: |
          source scripts/feeds-installer.sh
          install_feeds "${{ steps.cache_feeds.outputs.cache-hit }}"

      # 加载自定义配置
      - name: 加载自定义配置
        continue-on-error: true
        run: |
          source "$LOGGER_SCRIPT"
          source "${GITHUB_WORKSPACE}/scripts/common.sh"
          execute_custom_script "$DIY_SCRIPT" "自定义"

      # 合并基础配置和Ultra配置
      - name: 合并基础配置和Ultra配置
        continue-on-error: true
        run: |
          source "$LOGGER_SCRIPT"
          source "${GITHUB_WORKSPACE}/scripts/common.sh"
          source scripts/config-merger.sh
          
          # 查找Ultra配置文件
          CONFIG_ULTRA=$(find_config_file "Ultra")
          if [ $? -ne 0 ]; then
              log "ERROR" "Ultra配置文件不存在"
              exit 1
          fi
          
          log "INFO" "Ultra配置文件: $CONFIG_ULTRA"
          echo "CONFIG_ULTRA=$CONFIG_ULTRA" >> $GITHUB_ENV
          
          # 合并基础配置和分支配置
          merge_configs "$CONFIG_BASE" "$CONFIG_BRANCH"
          
          # 保存合并后的配置
          cp "$OPENWRT_PATH/.config" "$OPENWRT_PATH/.config.base"
          
          # 合并基础配置和Ultra配置
          merge_configs "$CONFIG_BASE" "$CONFIG_ULTRA"
          
          # 保存Ultra配置
          cp "$OPENWRT_PATH/.config" "$OPENWRT_PATH/.config.ultra"

      # 提取Ultra配置中的Luci软件包
      - name: 提取Ultra配置中的Luci软件包
        continue-on-error: true
        run: |
          source "$LOGGER_SCRIPT"
          step_start "EXTRACT_LUCI" "提取Ultra配置中的Luci软件包"
          
          # 提取Ultra配置中的Luci软件包
          LUCI_PACKAGES=$(grep "^CONFIG_PACKAGE_luci.*=y" "$CONFIG_ULTRA" | sed 's/^CONFIG_PACKAGE_//' | sed 's/=y//' | tr '\n' ' ')
          
          if [ -z "$LUCI_PACKAGES" ]; then
              log "WARN" "Ultra配置中没有找到Luci软件包"
              echo "LUCI_PACKAGES=" >> $GITHUB_ENV
          else
              log "INFO" "Ultra配置中的Luci软件包: $LUCI_PACKAGES"
              echo "LUCI_PACKAGES=$LUCI_PACKAGES" >> $GITHUB_ENV
              
              # 生成Luci软件包列表文件
              echo "$LUCI_PACKAGES" | tr ' ' '\n' > "$GITHUB_WORKSPACE/ultra_luci_packages.txt"
          fi
          
          step_complete "EXTRACT_LUCI" "success"

      # 恢复基础配置
      - name: 恢复基础配置
        continue-on-error: true
        run: |
          source "$LOGGER_SCRIPT"
          step_start "RESTORE_CONFIG" "恢复基础配置"
          
          # 恢复基础配置
          cp "$OPENWRT_PATH/.config.base" "$OPENWRT_PATH/.config"
          
          # 运行defconfig
          cd "$OPENWRT_PATH"
          if make defconfig; then
              log "INFO" "defconfig成功"
          else
              log "ERROR" "defconfig失败"
              exit 1
          fi
          
          step_complete "RESTORE_CONFIG" "success"

      # 下载软件包
      - name: 下载软件包
        continue-on-error: true
        run: |
          source scripts/builder.sh
          download_packages

      # 清理构建环境
      - name: 清理构建环境
        continue-on-error: true
        run: |
          source scripts/builder.sh
          clean_environment

      # 编译Ultra配置的Luci软件包
      - name: 编译Ultra配置的Luci软件包
        id: compile
        continue-on-error: true
        run: |
          source scripts/builder.sh
          
          if [ -n "$LUCI_PACKAGES" ]; then
              # 编译Ultra配置中的Luci软件包
              compile_packages "$LUCI_PACKAGES" "Ultra配置的Luci"
          else
              log "INFO" "没有需要编译的Luci软件包"
              echo "status=success" >> $GITHUB_OUTPUT
              echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
              echo "FILE_DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV
          fi

      # 生成构建报告
      - name: 生成构建报告
        if: always()
        continue-on-error: true
        run: |
          source scripts/reporter.sh
          generate_report "${{ steps.compile.outputs.status }}" "$BUILD_ID"

      # 检查空间使用情况
      - name: 检查空间使用情况
        if: (!cancelled())
        continue-on-error: true
        run: |
          source scripts/reporter.sh
          check_disk_space

      # 上传构建日志和报告
      - name: 上传构建日志和报告
        if: always()
        continue-on-error: true
        uses: actions/upload-artifact@main
        with:
          name: ${{ env.SOURCE_REPO }}-ultra-luci-logs-${{ env.CHIP_FAMILY }}-${{ env.REPO_SHORT }}-${{ env.FILE_DATE }}
          path: |
            ${{ github.workspace }}/build.log
            ${{ github.workspace }}/build_report.json
            ${{ github.workspace }}/build_summary.txt
            ${{ github.workspace }}/ultra_luci_packages.txt
          retention-days: 30

      # 上传Ultra Luci软件包到Artifact
      - name: 上传Ultra Luci软件包到Artifact
        if: steps.compile.outputs.status == 'success'
        continue-on-error: true
        uses: actions/upload-artifact@main
        with:
          name: ${{ env.SOURCE_REPO }}-ultra-luci-${{ env.CHIP_FAMILY }}-${{ env.REPO_SHORT }}-${{ env.FILE_DATE }}
          path: |
            ${{ env.OPENWRT_PATH }}/bin
          retention-days: 30

  # 阶段3: 并行编译3个分支下3个变体配置文件
  Build-Variants:
    name: 编译变体配置
    needs: Build-Ultra-Luci
    continue-on-error: true
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false  # 关键：不快速失败，让所有任务都执行
      matrix:
        # 定义要并行构建的仓库配置
        repo_config: 
          - immwrt
          - openwrt
          - libwrt
        # 定义要并行构建的变体配置
        variant_config: 
          - Pro
          - Max
          - Ultra
        # 芯片系列
        chip_family:
          - ipq60xx
    
    # 使用环境变量设置芯片系列和仓库配置
    env:
      CHIP_FAMILY: ${{ matrix.chip_family }}
      REPO_CONFIG: ${{ matrix.repo_config }}
      VARIANT_CONFIG: ${{ matrix.variant_config }}
      BUILD_ID: ${{ github.run_id }}-${{ matrix.repo_config }}-${{ matrix.chip_family }}-${{ matrix.variant_config }}
      # 设置GitHub CLI token
      GH_TOKEN: ${{ github.token }}
      
    steps:
      # 检出代码
      - name: 检出代码
        continue-on-error: true
        uses: actions/checkout@main

      # 缓存环境
      - name: 缓存环境
        id: cache_env
        continue-on-error: true
        uses: actions/cache@main
        with:
          key: ${{ env.CACHE_VERSION }}-env-ubuntu-22.04
          restore-keys: |
            ${{ env.CACHE_VERSION }}-env-ubuntu-
            ${{ env.CACHE_VERSION }}-env-
          path: |
            /usr/local/bin
            /usr/local/lib
            /usr/lib
            /var/lib/apt
            /var/cache/apt
            /etc/apt

      # 初始化日志系统
      - name: 初始化日志系统
        continue-on-error: true
        run: |
          source scripts/logger.sh
          init_logger "$BUILD_ID"

      # 初始化环境
      - name: 初始化环境
        continue-on-error: true
        run: |
          source scripts/env-init.sh
          init_environment

      # 读取仓库配置
      - name: 读取仓库配置
        continue-on-error: true
        run: |
          source scripts/repo-config.sh
          read_repo_config "$REPO_CONFIG"

      # 克隆源代码
      - name: 克隆源代码
        continue-on-error: true
        run: |
          source scripts/source-clone.sh
          clone_source "$REPO_URL" "$REPO_BRANCH"

      # 生成变量
      - name: 生成变量
        continue-on-error: true
        run: |
          source scripts/vars-generator.sh
          generate_variables "$CHIP_FAMILY" "$REPO_SHORT" "$REPO_URL"

      # 设置缓存
      - name: 设置缓存
        continue-on-error: true
        run: |
          source scripts/cache-manager.sh
          setup_caches "$SOURCE_REPO" "$REPO_BRANCH" "$DEVICE_TARGET" "$DEVICE_SUBTARGET" "$FEEDS_HASH"

      # 缓存工具链
      - name: 缓存工具链
        id: cache_toolchain
        continue-on-error: true
        uses: actions/cache@main
        with:
          key: ${{ env.TOOLCHAIN_KEY }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-toolchain-${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-
            ${{ env.CACHE_VERSION }}-toolchain-${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-
            ${{ env.CACHE_VERSION }}-toolchain-${{ env.SOURCE_REPO }}-
            ${{ env.CACHE_VERSION }}-toolchain-
          path: |
            ${{ env.OPENWRT_PATH }}/.ccache
            ${{ env.OPENWRT_PATH }}/staging_dir

      # 缓存Feeds
      - name: 缓存Feeds
        id: cache_feeds
        continue-on-error: true
        uses: actions/cache@main
        with:
          key: ${{ env.FEEDS_KEY }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-feeds-${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-
            ${{ env.CACHE_VERSION }}-feeds-${{ env.SOURCE_REPO }}-
            ${{ env.CACHE_VERSION }}-feeds-
          path: |
            ${{ env.OPENWRT_PATH }}/feeds
            ${{ env.OPENWRT_PATH }}/dl
            ${{ env.OPENWRT_PATH }}/package/feeds

      # 缓存DL软件包
      - name: 缓存DL软件包
        id: cache_dl
        continue-on-error: true
        uses: actions/cache@main
        with:
          key: ${{ env.DL_KEY }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-dl-${{ env.SOURCE_REPO }}-
            ${{ env.CACHE_VERSION }}-dl-
          path: |
            ${{ env.OPENWRT_PATH }}/dl

      # 检查缓存状态
      - name: 检查缓存状态
        continue-on-error: true
        run: |
          source scripts/cache-manager.sh
          check_cache_status "${{ steps.cache_toolchain.outputs.cache-hit }}" "${{ steps.cache_feeds.outputs.cache-hit }}" "${{ steps.cache_dl.outputs.cache-hit }}"

      # 刷新缓存
      - name: 刷新缓存
        continue-on-error: true
        run: |
          source scripts/cache-manager.sh
          refresh_cache

      # 添加第三方软件源
      - name: 添加第三方软件源
        continue-on-error: true
        run: |
          source "$LOGGER_SCRIPT"
          source "${GITHUB_WORKSPACE}/scripts/common.sh"
          execute_custom_script "$REPO_SCRIPT" "软件源"

      # 安装Feeds
      - name: 安装Feeds
        continue-on-error: true
        run: |
          source scripts/feeds-installer.sh
          install_feeds "${{ steps.cache_feeds.outputs.cache-hit }}"

      # 加载自定义配置
      - name: 加载自定义配置
        continue-on-error: true
        run: |
          source "$LOGGER_SCRIPT"
          source "${GITHUB_WORKSPACE}/scripts/common.sh"
          execute_custom_script "$DIY_SCRIPT" "自定义"

      # 合并基础配置和变体配置
      - name: 合并基础配置和变体配置
        continue-on-error: true
        run: |
          source "$LOGGER_SCRIPT"
          source "${GITHUB_WORKSPACE}/scripts/common.sh"
          source scripts/config-merger.sh
          
          # 查找变体配置文件
          CONFIG_VARIANT=$(find_config_file "$VARIANT_CONFIG")
          if [ $? -ne 0 ]; then
              log "ERROR" "${VARIANT_CONFIG}配置文件不存在"
              exit 1
          fi
          
          log "INFO" "${VARIANT_CONFIG}配置文件: $CONFIG_VARIANT"
          echo "CONFIG_VARIANT=$CONFIG_VARIANT" >> $GITHUB_ENV
          
          # 合并基础配置和分支配置
          merge_configs "$CONFIG_BASE" "$CONFIG_BRANCH"
          
          # 保存合并后的配置
          cp "$OPENWRT_PATH/.config" "$OPENWRT_PATH/.config.base"
          
          # 合并基础配置和变体配置
          merge_variant_config "$CONFIG_BASE" "$CONFIG_VARIANT" "$VARIANT_CONFIG"

      # 下载软件包
      - name: 下载软件包
        continue-on-error: true
        run: |
          source scripts/builder.sh
          download_packages

      # 清理构建环境
      - name: 清理构建环境
        continue-on-error: true
        run: |
          source scripts/builder.sh
          clean_environment

      # 编译变体配置
      - name: 编译变体配置
        id: compile
        continue-on-error: true
        run: |
          source scripts/builder.sh
          compile_firmware "${VARIANT_CONFIG}变体"

      # 生成构建报告
      - name: 生成构建报告
        if: always()
        continue-on-error: true
        run: |
          source scripts/reporter.sh
          generate_report "${{ steps.compile.outputs.status }}" "$BUILD_ID"

      # 检查空间使用情况
      - name: 检查空间使用情况
        if: (!cancelled())
        continue-on-error: true
        run: |
          source scripts/reporter.sh
          check_disk_space

      # 上传构建日志和报告
      - name: 上传构建日志和报告
        if: always()
        continue-on-error: true
        uses: actions/upload-artifact@main
        with:
          name: ${{ env.SOURCE_REPO }}-${{ env.VARIANT_CONFIG }}-logs-${{ env.CHIP_FAMILY }}-${{ env.REPO_SHORT }}-${{ env.FILE_DATE }}
          path: |
            ${{ github.workspace }}/build.log
            ${{ github.workspace }}/build_report.json
            ${{ github.workspace }}/build_summary.txt
            ${{ github.workspace }}/luci_${{ env.VARIANT_CONFIG }}_report.md
            ${{ github.workspace }}/luci_${{ env.VARIANT_CONFIG }}_defconfig_report.md
          retention-days: 30

      # 上传变体配置到Artifact
      - name: 上传变体配置到Artifact
        if: steps.compile.outputs.status == 'success'
        continue-on-error: true
        uses: actions/upload-artifact@main
        with:
          name: ${{ env.SOURCE_REPO }}-${{ env.VARIANT_CONFIG }}-${{ env.CHIP_FAMILY }}-${{ env.REPO_SHORT }}-${{ env.FILE_DATE }}
          path: |
            ${{ env.OPENWRT_PATH }}/bin
            ${{ env.OPENWRT_PATH }}/.config
          retention-days: 30
