name: IPQ60XX-Triple-Stage-Build

on:
  workflow_dispatch:
    inputs:
      repo_config:
        description: '选择要构建的仓库 (留空则构建所有)'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - openwrt
          - immwrt
          - libwrt
  workflow_call:

env:
  TZ: Asia/Shanghai
  OPENWRT_PATH: /mnt/openwrt
  CONFIG_BASE_DIR: configs
  DIY_SCRIPT_DIR: scripts
  CACHE_VERSION: v3
  LOG_LEVEL: INFO
  LOG_FILE: build.log
  REPORT_FILE: build_report.json

jobs:
  # ==================== 阶段一：并行构建基础环境 ====================
  Build-Bases:
    if: github.event.inputs.repo_config == 'all' || github.event.inputs.repo_config == ''
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        repo_config: ['openwrt', 'immwrt', 'libwrt']
    
    outputs:
      repo_short_openwrt: ${{ steps.generate_vars.outputs.repo_short_openwrt }}
      repo_short_immwrt: ${{ steps.generate_vars.outputs.repo_short_immwrt }}
      repo_short_libwrt: ${{ steps.generate_vars.outputs.repo_short_libwrt }}

    steps:
    - name: 初始化日志系统
      run: |
        cat > /tmp/logger.sh << 'EOF'
        #!/bin/bash
        declare -A LOG_LEVELS=([DEBUG]=0 [INFO]=1 [WARN]=2 [ERROR]=3)
        CURRENT_LEVEL=${LOG_LEVELS[$LOG_LEVEL]}
        LOG_FILE="$GITHUB_WORKSPACE/$LOG_FILE"
        REPORT_FILE="$GITHUB_WORKSPACE/$REPORT_FILE"
        echo "=== Build Log Started at $(date) ===" > "$LOG_FILE"
        echo '{"build_id":"base-'${{ matrix.repo_config }}'-$(date +%s)","start_time":"'$(date -Iseconds)'","steps":[],"errors":[],"warnings":[]}' > "$REPORT_FILE"
        log() { local level="$1" message="$2" step="${3:-$(caller | awk '{print $2}')}"; local timestamp=$(date '+%Y-%m-%d %H:%M:%S'); if [ ${LOG_LEVELS[$level]} -ge $CURRENT_LEVEL ]; then case $level in DEBUG) echo -e "\033[0;37m[$timestamp] [DEBUG] $message\033[0m" ;; INFO) echo -e "\033[0;34m[$timestamp] [INFO] $message\033[0m" ;; WARN) echo -e "\033[0;33m[$timestamp] [WARN] $message\033[0m" ;; ERROR) echo -e "\033[1;41;37m[$timestamp] [ERROR] $message\033[0m" ;; esac; echo "[$timestamp] [$level] [Step: $step] $message" >> "$LOG_FILE"; fi; }
        step_start() { local step_name="$1" description="$2"; log "INFO" "▶ 开始执行: $description" "$step_name"; }
        step_complete() { local step_name="$1" status="$2"; if [ "$status" = "success" ]; then log "INFO" "✅ 步骤完成: $step_name" "$step_name"; elif [ "$status" = "failed" ]; then log "ERROR" "❌ 步骤失败: $step_name" "$step_name"; fi; }
        export -f log step_start step_complete
        EOF
        chmod +x /tmp/logger.sh
        echo "LOGGER_SCRIPT=/tmp/logger.sh" >> $GITHUB_ENV
        source /tmp/logger.sh
        step_start "INIT" "初始化基础环境构建日志"

    - name: 检查系统资源
      run: |
        source "$LOGGER_SCRIPT"
        step_start "CHECK_RESOURCES" "检查系统资源"
        log "INFO" "CPU核心数: $(nproc)"
        log "INFO" "内存总量: $(free -h | grep '^Mem:' | awk '{print $2}')"
        log "INFO" "可用内存: $(free -h | grep '^Mem:' | awk '{print $7}')"
        log "INFO" "磁盘空间: $(df -h $GITHUB_WORKSPACE | tail -1 | awk '{print $4}')"
        
        # 检查内存是否足够
        AVAILABLE_MEM=$(free -m | grep '^Mem:' | awk '{print $7}')
        if [ "$AVAILABLE_MEM" -lt 2048 ]; then
          log "WARN" "可用内存不足2GB，可能导致编译失败"
        fi
        
        # 检查磁盘空间是否足够
        AVAILABLE_SPACE=$(df $GITHUB_WORKSPACE | tail -1 | awk '{print $4}')
        if [ "$AVAILABLE_SPACE" -lt 10485760 ]; then  # 10GB
          log "WARN" "可用磁盘空间不足10GB，可能导致编译失败"
        fi
        
        step_complete "CHECK_RESOURCES" "success"

    - name: 检出代码
      uses: actions/checkout@v4

    - name: 读取仓库配置
      id: read_repo_config
      run: |
        source "$LOGGER_SCRIPT"
        step_start "READ_CONFIG" "读取仓库配置 (${{ matrix.repo_config }})"
        REPO_CONFIG_FILE="${GITHUB_WORKSPACE}/${CONFIG_BASE_DIR}/repos.json"
        REPO_INFO=$(jq -r --arg repo "${{ matrix.repo_config }}" '.[$repo]' "$REPO_CONFIG_FILE")
        if [ "$REPO_INFO" = "null" ]; then log "ERROR" "未找到仓库配置: ${{ matrix.repo_config }}"; exit 1; fi
        echo "REPO_URL=$(echo "$REPO_INFO" | jq -r '.url')" >> $GITHUB_ENV
        echo "REPO_BRANCH=$(echo "$REPO_INFO" | jq -r '.branch')" >> $GITHUB_ENV
        echo "REPO_SHORT=$(echo "$REPO_INFO" | jq -r '.short')" >> $GITHUB_ENV
        log "INFO" "仓库: ${{ matrix.repo_config }} ($REPO_URL)"
        step_complete "READ_CONFIG" "success"

    - name: 克隆源代码
      run: |
        source "$LOGGER_SCRIPT"
        step_start "CLONE" "克隆源代码"
        sudo mkdir -p "$OPENWRT_PATH" && sudo chown -R $(id -u):$(id -g) "$OPENWRT_PATH"
        git clone --depth 1 -b "$REPO_BRANCH" --single-branch "$REPO_URL" "$OPENWRT_PATH"
        step_complete "CLONE" "success"

    - name: 生成变量
      id: generate_vars
      run: |
        source "$LOGGER_SCRIPT"
        step_start "GEN_VARS" "生成构建变量"
        find_config_file() { local base_name="$1"; local config_dir="${GITHUB_WORKSPACE}/${CONFIG_BASE_DIR}"; for ext in ".config" ".config.txt"; do if [ -f "${config_dir}/${base_name}${ext}" ]; then echo "${config_dir}/${base_name}${ext}"; return 0; fi; done; return 1; }
        CONFIG_BASE=$(find_config_file "base_ipq60xx")
        CONFIG_BRANCH=$(find_config_file "base_${REPO_SHORT}")
        cp "$CONFIG_BASE" "$OPENWRT_PATH/.config"
        cd "$OPENWRT_PATH" && make defconfig > /dev/null 2>&1
        
        # 为每个仓库设置输出变量
        if [ "${{ matrix.repo_config }}" = "openwrt" ]; then
          echo "repo_short_openwrt=${REPO_SHORT}" >> $GITHUB_OUTPUT
        elif [ "${{ matrix.repo_config }}" = "immwrt" ]; then
          echo "repo_short_immwrt=${REPO_SHORT}" >> $GITHUB_OUTPUT
        elif [ "${{ matrix.repo_config }}" = "libwrt" ]; then
          echo "repo_short_libwrt=${REPO_SHORT}" >> $GITHUB_OUTPUT
        fi
        
        log "INFO" "设备信息: $(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')"
        step_complete "GEN_VARS" "success"

    - name: 清理旧的缓存（如果需要）
      run: |
        source "$LOGGER_SCRIPT"
        step_start "CLEAN_CACHE" "检查并清理可能损坏的缓存"
        
        # 检查缓存目录是否存在且有效
        if [ -d "$OPENWRT_PATH/staging_dir" ]; then
          log "INFO" "检查现有工具链缓存..."
          # 检查关键文件是否存在
          if [ ! -f "$OPENWRT_PATH/staging_dir/host/bin/ccache" ] && [ ! -f "$OPENWRT_PATH/staging_dir/toolchain-arm_cortex-a7+neon-vfpv4_gcc-11.2.0_musl_eabi/bin/arm-openwrt-linux-muslgnueabi-gcc" ]; then
            log "WARN" "工具链缓存可能损坏，清理中..."
            rm -rf "$OPENWRT_PATH/staging_dir"
          fi
        fi
        
        step_complete "CLEAN_CACHE" "success"

    - name: 缓存工具链和Feeds
      uses: actions/cache@v4
      with:
        key: ${{ env.CACHE_VERSION }}-base-${{ matrix.repo_config }}-${{ env.REPO_BRANCH }}-${{ hashFiles('**/feeds.conf.default') }}
        restore-keys: |
          ${{ env.CACHE_VERSION }}-base-${{ matrix.repo_config }}-${{ env.REPO_BRANCH }}-
          ${{ env.CACHE_VERSION }}-base-${{ matrix.repo_config }}-
        path: |
          ${{ env.OPENWRT_PATH }}/staging_dir
          ${{ env.OPENWRT_PATH }}/dl
          ${{ env.OPENWRT_PATH }}/feeds
          ${{ env.OPENWRT_PATH }}/build_dir

    - name: 准备构建环境
      run: |
        source "$LOGGER_SCRIPT"
        step_start "PREP_ENV" "准备构建环境"
        cd "$OPENWRT_PATH"
        
        # 更新feeds
        if [ ! -d "feeds" ]; then 
          log "INFO" "更新feeds..."
          ./scripts/feeds update -a
        else
          log "INFO" "feeds已存在，跳过更新"
        fi
        
        # 安装feeds
        log "INFO" "安装feeds..."
        ./scripts/feeds install -a
        
        # 执行自定义脚本
        if [ -f "${{ env.DIY_SCRIPT_DIR }}/diy.sh" ]; then 
          log "INFO" "执行自定义脚本..."
          chmod +x "${{ env.DIY_SCRIPT_DIR }}/diy.sh" && "${{ env.DIY_SCRIPT_DIR }}/diy.sh"
        fi
        
        step_complete "PREP_ENV" "success"

    - name: 编译基础环境（并行模式）
      id: compile_base_parallel
      continue-on-error: true
      run: |
        source "$LOGGER_SCRIPT"
        step_start "COMPILE_BASE_PARALLEL" "编译基础环境（并行模式）"
        cd "$OPENWRT_PATH"
        
        # 设置编译日志文件
        BUILD_LOG="$GITHUB_WORKSPACE/build_parallel.log"
        
        # 尝试并行编译
        log "INFO" "开始并行编译基础环境..."
        if make -j$(nproc) toolchain/kernel-headers compile > "$BUILD_LOG" 2>&1; then
          log "INFO" "并行编译成功"
          echo "status=success" >> $GITHUB_OUTPUT
          step_complete "COMPILE_BASE_PARALLEL" "success"
        else
          log "ERROR" "并行编译失败，将尝试单线程编译"
          echo "status=failed" >> $GITHUB_OUTPUT
          step_complete "COMPILE_BASE_PARALLEL" "failed"
          exit 1
        fi

    - name: 编译基础环境（单线程模式）
      id: compile_base_serial
      if: steps.compile_base_parallel.outcome == 'failure'
      run: |
        source "$LOGGER_SCRIPT"
        step_start "COMPILE_BASE_SERIAL" "编译基础环境（单线程详细模式）"
        cd "$OPENWRT_PATH"
        
        # 设置编译日志文件
        BUILD_LOG="$GITHUB_WORKSPACE/build_serial.log"
        
        # 尝试单线程详细编译
        log "INFO" "开始单线程详细编译基础环境..."
        if make -j1 V=s toolchain/kernel-headers compile > "$BUILD_LOG" 2>&1; then
          log "INFO" "单线程编译成功"
          echo "status=success" >> $GITHUB_OUTPUT
          step_complete "COMPILE_BASE_SERIAL" "success"
        else
          log "ERROR" "单线程编译也失败了"
          
          # 提取最后几行错误信息
          log "ERROR" "编译错误详情（最后20行）："
          tail -20 "$BUILD_LOG" | while read line; do
            log "ERROR" "$line"
          done
          
          # 查找常见的错误模式
          if grep -q "error:" "$BUILD_LOG"; then
            log "ERROR" "发现编译错误："
            grep -n "error:" "$BUILD_LOG" | tail -5 | while read line; do
              log "ERROR" "$line"
            done
          fi
          
          if grep -q "No space left on device" "$BUILD_LOG"; then
            log "ERROR" "磁盘空间不足！"
          fi
          
          if grep -q "Permission denied" "$BUILD_LOG"; then
            log "ERROR" "权限问题！"
          fi
          
          echo "status=failed" >> $GITHUB_OUTPUT
          step_complete "COMPILE_BASE_SERIAL" "failed"
          exit 1
        fi

    - name: 上传构建日志
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ matrix.repo_config }}
        path: |
          ${{ github.workspace }}/build_parallel.log
          ${{ github.workspace }}/build_serial.log
        retention-days: 7

    - name: 上传基础环境
      if: steps.compile_base_parallel.outcome == 'success' || steps.compile_base_serial.outcome == 'success'
      uses: actions/upload-artifact@v4
      with:
        name: base-env-${{ matrix.repo_config }}
        path: ${{ env.OPENWRT_PATH }}
        retention-days: 7

  # ==================== 阶段二：集中预编译通用软件包 ====================
  Prebuild-Packages:
    needs: Build-Bases
    runs-on: ubuntu-22.04
    steps:
    - name: 初始化日志系统
      run: |
        cat > /tmp/logger.sh << 'EOF'
        #!/bin/bash
        declare -A LOG_LEVELS=([DEBUG]=0 [INFO]=1 [WARN]=2 [ERROR]=3)
        CURRENT_LEVEL=${LOG_LEVELS[$LOG_LEVEL]}
        LOG_FILE="$GITHUB_WORKSPACE/$LOG_FILE"
        REPORT_FILE="$GITHUB_WORKSPACE/$REPORT_FILE"
        echo "=== Prebuild Log Started at $(date) ===" > "$LOG_FILE"
        echo '{"build_id":"prebuild-$(date +%s)","start_time":"'$(date -Iseconds)'","steps":[],"errors":[],"warnings":[]}' > "$REPORT_FILE"
        log() { local level="$1" message="$2" step="${3:-$(caller | awk '{print $2}')}"; local timestamp=$(date '+%Y-%m-%d %H:%M:%S'); if [ ${LOG_LEVELS[$level]} -ge $CURRENT_LEVEL ]; then case $level in DEBUG) echo -e "\033[0;37m[$timestamp] [DEBUG] $message\033[0m" ;; INFO) echo -e "\033[0;34m[$timestamp] [INFO] $message\033[0m" ;; WARN) echo -e "\033[0;33m[$timestamp] [WARN] $message\033[0m" ;; ERROR) echo -e "\033[1;41;37m[$timestamp] [ERROR] $message\033[0m" ;; esac; echo "[$timestamp] [$level] [Step: $step] $message" >> "$LOG_FILE"; fi; }
        step_start() { local step_name="$1" description="$2"; log "INFO" "▶ 开始执行: $description" "$step_name"; }
        step_complete() { local step_name="$1" status="$2"; if [ "$status" = "success" ]; then log "INFO" "✅ 步骤完成: $step_name" "$step_name"; elif [ "$status" = "failed" ]; then log "ERROR" "❌ 步骤失败: $step_name" "$step_name"; fi; }
        export -f log step_start step_complete
        EOF
        chmod +x /tmp/logger.sh
        echo "LOGGER_SCRIPT=/tmp/logger.sh" >> $GITHUB_ENV
        source /tmp/logger.sh
        step_start "INIT" "初始化预编译构建日志"

    - name: 检出代码
      uses: actions/checkout@v4

    - name: 下载基础环境
      uses: actions/download-artifact@v4
      with:
        name: base-env-openwrt
        path: ${{ env.OPENWRT_PATH }}

    - name: 生成"超级配置"
      id: generate_super_config
      run: |
        source "$LOGGER_SCRIPT"
        step_start "GEN_SUPER_CONFIG" "生成包含所有变体软件包的超级配置"
        cd "$OPENWRT_PATH"
        echo "CONFIG_TARGET_ipq60xx=y" > .config
        echo "CONFIG_TARGET_ipq60xx_DEVICE_generic=y" >> .config
        echo "CONFIG_TARGET_DEVICE_ipq60xx_generic=y" >> .config
        
        for variant in Pro Max Ultra; do
          log "INFO" "合并 $variant 配置"
          if [ -f "${{ env.CONFIG_BASE_DIR }}/${variant}.config" ]; then
            cat "${{ env.CONFIG_BASE_DIR }}/${variant}.config" >> .config
          else
            log "WARN" "配置文件不存在: ${{ env.CONFIG_BASE_DIR }}/${variant}.config"
          fi
        done
        
        log "INFO" "运行 defconfig 解析依赖..."
        make defconfig
        log "INFO" "超级配置生成完成"
        step_complete "GEN_SUPER_CONFIG" "success"

    - name: 缓存预编译软件包
      uses: actions/cache@v4
      with:
        key: ${{ env.CACHE_VERSION }}-prebuilt-packages-ipq60xx-${{ hashFiles('configs/Pro.config', 'configs/Max.config', 'configs/Ultra.config') }}
        path: |
          ${{ env.OPENWRT_PATH }}/staging_dir
          ${{ env.OPENWRT_PATH }}/build_dir
          ${{ env.OPENWRT_PATH }}/dl

    - name: 预编译所有第三方软件包（并行模式）
      id: prebuild_parallel
      continue-on-error: true
      run: |
        source "$LOGGER_SCRIPT"
        step_start "PREBUILD_PKGS_PARALLEL" "预编译所有第三方软件包（并行模式）"
        cd "$OPENWRT_PATH"
        
        # 设置编译日志文件
        BUILD_LOG="$GITHUB_WORKSPACE/prebuild_parallel.log"
        
        # 提取所有 luci-开头的包
        PACKAGES=$(grep "^CONFIG_PACKAGE_luci-.*=y" .config | sed 's/CONFIG_PACKAGE_//' | sed 's/=y//' | tr '\n' ' ')
        if [ -z "$PACKAGES" ]; then
          log "WARN" "未找到需要预编译的 Luci 软件包，跳过编译。"
          echo "status=success" >> $GITHUB_OUTPUT
          step_complete "PREBUILD_PKGS_PARALLEL" "success"
        else
          log "INFO" "即将预编译的软件包: $PACKAGES"
          if make -j$(nproc) $PACKAGES/compile > "$BUILD_LOG" 2>&1; then
            log "INFO" "并行预编译成功"
            echo "status=success" >> $GITHUB_OUTPUT
            step_complete "PREBUILD_PKGS_PARALLEL" "success"
          else
            log "ERROR" "并行预编译失败，将尝试单线程编译"
            echo "status=failed" >> $GITHUB_OUTPUT
            step_complete "PREBUILD_PKGS_PARALLEL" "failed"
            exit 1
          fi
        fi

    - name: 预编译所有第三方软件包（单线程模式）
      id: prebuild_serial
      if: steps.prebuild_parallel.outcome == 'failure'
      run: |
        source "$LOGGER_SCRIPT"
        step_start "PREBUILD_PKGS_SERIAL" "预编译所有第三方软件包（单线程详细模式）"
        cd "$OPENWRT_PATH"
        
        # 设置编译日志文件
        BUILD_LOG="$GITHUB_WORKSPACE/prebuild_serial.log"
        
        # 提取所有 luci-开头的包
        PACKAGES=$(grep "^CONFIG_PACKAGE_luci-.*=y" .config | sed 's/CONFIG_PACKAGE_//' | sed 's/=y//' | tr '\n' ' ')
        
        log "INFO" "开始单线程详细预编译软件包: $PACKAGES"
        if make -j1 V=s $PACKAGES/compile > "$BUILD_LOG" 2>&1; then
          log "INFO" "单线程预编译成功"
          echo "status=success" >> $GITHUB_OUTPUT
          step_complete "PREBUILD_PKGS_SERIAL" "success"
        else
          log "ERROR" "单线程预编译也失败了"
          
          # 提取最后几行错误信息
          log "ERROR" "预编译错误详情（最后20行）："
          tail -20 "$BUILD_LOG" | while read line; do
            log "ERROR" "$line"
          done
          
          # 查找常见的错误模式
          if grep -q "error:" "$BUILD_LOG"; then
            log "ERROR" "发现编译错误："
            grep -n "error:" "$BUILD_LOG" | tail -5 | while read line; do
              log "ERROR" "$line"
            done
          fi
          
          echo "status=failed" >> $GITHUB_OUTPUT
          step_complete "PREBUILD_PKGS_SERIAL" "failed"
          exit 1
        fi

    - name: 上传预编译日志
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: prebuild-logs
        path: |
          ${{ github.workspace }}/prebuild_parallel.log
          ${{ github.workspace }}/prebuild_serial.log
        retention-days: 7

    - name: 上传预编译软件包
      if: steps.prebuild_parallel.outcome == 'success' || steps.prebuild_serial.outcome == 'success'
      uses: actions/upload-artifact@v4
      with:
        name: prebuilt-packages-ipq60xx
        path: ${{ env.OPENWRT_PATH }}/staging_dir
        retention-days: 7

  # ==================== 阶段三：并行组装变体固件 ====================
  Assemble-Variants:
    needs: [Build-Bases, Prebuild-Packages]
    if: success() && needs.Prebuild-Packages.result == 'success'
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        repo: ['openwrt', 'immwrt', 'libwrt']
        variant: ['Pro', 'Max', 'Ultra']
    
    steps:
    - name: 初始化日志系统
      run: |
        cat > /tmp/logger.sh << 'EOF'
        #!/bin/bash
        declare -A LOG_LEVELS=([DEBUG]=0 [INFO]=1 [WARN]=2 [ERROR]=3)
        CURRENT_LEVEL=${LOG_LEVELS[$LOG_LEVEL]}
        LOG_FILE="$GITHUB_WORKSPACE/$LOG_FILE"
        REPORT_FILE="$GITHUB_WORKSPACE/$REPORT_FILE"
        echo "=== Variant Log Started at $(date) ===" > "$LOG_FILE"
        echo '{"build_id":"variant-${{ matrix.repo }}-${{ matrix.variant }}-$(date +%s)","start_time":"'$(date -Iseconds)'","steps":[],"errors":[],"warnings":[]}' > "$REPORT_FILE"
        log() { local level="$1" message="$2" step="${3:-$(caller | awk '{print $2}')}"; local timestamp=$(date '+%Y-%m-%d %H:%M:%S'); if [ ${LOG_LEVELS[$level]} -ge $CURRENT_LEVEL ]; then case $level in DEBUG) echo -e "\033[0;37m[$timestamp] [DEBUG] $message\033[0m" ;; INFO) echo -e "\033[0;34m[$timestamp] [INFO] $message\033[0m" ;; WARN) echo -e "\033[0;33m[$timestamp] [WARN] $message\033[0m" ;; ERROR) echo -e "\033[1;41;37m[$timestamp] [ERROR] $message\033[0m" ;; esac; echo "[$timestamp] [$level] [Step: $step] $message" >> "$LOG_FILE"; fi; }
        step_start() { local step_name="$1" description="$2"; log "INFO" "▶ 开始执行: $description" "$step_name"; }
        step_complete() { local step_name="$1" status="$2"; if [ "$status" = "success" ]; then log "INFO" "✅ 步骤完成: $step_name" "$step_name"; elif [ "$status" = "failed" ]; then log "ERROR" "❌ 步骤失败: $step_name" "$step_name"; fi; }
        export -f log step_start step_complete
        EOF
        chmod +x /tmp/logger.sh
        echo "LOGGER_SCRIPT=/tmp/logger.sh" >> $GITHUB_ENV
        source /tmp/logger.sh
        step_start "INIT" "初始化变体组装日志 (${{ matrix.repo }}-${{ matrix.variant }})"

    - name: 检出代码
      uses: actions/checkout@v4

    - name: 下载基础环境
      uses: actions/download-artifact@v4
      with:
        name: base-env-${{ matrix.repo }}
        path: ${{ env.OPENWRT_PATH }}

    - name: 下载预编译软件包
      uses: actions/download-artifact@v4
      with:
        name: prebuilt-packages-ipq60xx
        path: ${{ env.OPENWRT_PATH }}/staging_dir # 覆盖staging_dir

    - name: 准备变体配置
      run: |
        source "$LOGGER_SCRIPT"
        step_start "PREP_VARIANT" "准备变体配置 (${{ matrix.variant }})"
        cd "$OPENWRT_PATH"
        find_config_file() { local base_name="$1"; local config_dir="${GITHUB_WORKSPACE}/${CONFIG_BASE_DIR}"; for ext in ".config" ".config.txt"; do if [ -f "${config_dir}/${base_name}${ext}" ]; then echo "${config_dir}/${base_name}${ext}"; return 0; fi; done; return 1; }
        CONFIG_BASE=$(find_config_file "base_ipq60xx")
        CONFIG_VARIANT=$(find_config_file "${{ matrix.variant }}")
        cat "$CONFIG_BASE" "$CONFIG_VARIANT" > .config.tmp && mv .config.tmp .config
        make defconfig
        step_complete "PREP_VARIANT" "success"

    - name: 组装固件（并行模式）
      id: assemble_parallel
      continue-on-error: true
      run: |
        source "$LOGGER_SCRIPT"
        step_start "ASSEMBLE_FIRMWARE_PARALLEL" "组装最终固件（并行模式）"
        cd "$OPENWRT_PATH"
        
        # 设置编译日志文件
        BUILD_LOG="$GITHUB_WORKSPACE/assemble_parallel.log"
        
        if make -j$(nproc) > "$BUILD_LOG" 2>&1; then
          log "INFO" "并行组装固件成功"
          echo "status=success" >> $GITHUB_OUTPUT
          step_complete "ASSEMBLE_FIRMWARE_PARALLEL" "success"
        else
          log "ERROR" "并行组装固件失败，将尝试单线程组装"
          echo "status=failed" >> $GITHUB_OUTPUT
          step_complete "ASSEMBLE_FIRMWARE_PARALLEL" "failed"
          exit 1
        fi

    - name: 组装固件（单线程模式）
      id: assemble_serial
      if: steps.assemble_parallel.outcome == 'failure'
      run: |
        source "$LOGGER_SCRIPT"
        step_start "ASSEMBLE_FIRMWARE_SERIAL" "组装最终固件（单线程详细模式）"
        cd "$OPENWRT_PATH"
        
        # 设置编译日志文件
        BUILD_LOG="$GITHUB_WORKSPACE/assemble_serial.log"
        
        if make -j1 V=s > "$BUILD_LOG" 2>&1; then
          log "INFO" "单线程组装固件成功"
          echo "status=success" >> $GITHUB_OUTPUT
          step_complete "ASSEMBLE_FIRMWARE_SERIAL" "success"
        else
          log "ERROR" "单线程组装固件也失败了"
          
          # 提取最后几行错误信息
          log "ERROR" "组装固件错误详情（最后20行）："
          tail -20 "$BUILD_LOG" | while read line; do
            log "ERROR" "$line"
          done
          
          echo "status=failed" >> $GITHUB_OUTPUT
          step_complete "ASSEMBLE_FIRMWARE_SERIAL" "failed"
          exit 1
        fi

    - name: 上传固件产物
      if: steps.assemble_parallel.outcome == 'success' || steps.assemble_serial.outcome == 'success'
      uses: actions/upload-artifact@v4
      with:
        name: firmware-${{ matrix.repo }}-${{ matrix.variant }}-${{ env.FILE_DATE }}
        path: ${{ env.OPENWRT_PATH }}/bin/targets/
        retention-days: 30

    - name: 上传构建日志
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: logs-${{ matrix.repo }}-${{ matrix.variant }}-${{ env.FILE_DATE }}
        path: |
          ${{ github.workspace }}/$LOG_FILE
          ${{ github.workspace }}/$REPORT_FILE
          ${{ github.workspace }}/assemble_parallel.log
          ${{ github.workspace }}/assemble_serial.log
        retention-days: 7
