name: IPQ60XX-Triple-Stage-Build

on:
  workflow_dispatch:
    inputs:
      repo_config:
        description: '选择要构建的仓库 (留空则构建所有)'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - openwrt
          - immwrt
          - libwrt
  workflow_call:

env:
  TZ: Asia/Shanghai
  OPENWRT_PATH: /mnt/openwrt
  CONFIG_BASE_DIR: configs
  DIY_SCRIPT_DIR: scripts
  CACHE_VERSION: v3
  BUILD_LOG_LEVEL: INFO
  BUILD_LOG_FILE: build.log
  REPORT_FILE: build_report.json
  FILE_DATE: ${{ github.run_number }}-${{ github.sha }}

jobs:
  # ==================== 阶段一：构建基础环境 ====================
  Build-Bases:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        repo_config: ['openwrt', 'immwrt', 'libwrt']
        include:
          - repo_config: openwrt
            repo_url: https://github.com/openwrt/openwrt.git
            repo_branch: master
          - repo_config: immwrt
            repo_url: https://github.com/immortalwrt/immortalwrt.git
            repo_branch: master
          - repo_config: libwrt
            repo_url: https://github.com/LibreWrt/LibreWrt.git
            repo_branch: master
    
    steps:
    - name: 初始化日志系统
      run: |
        cat > /tmp/logger.sh << 'EOF'
        #!/bin/bash
        declare -A LOG_LEVELS=([DEBUG]=0 [INFO]=1 [WARN]=2 [ERROR]=3)
        CURRENT_LEVEL=${LOG_LEVELS[$BUILD_LOG_LEVEL]}
        LOG_FILE="$GITHUB_WORKSPACE/$BUILD_LOG_FILE"
        REPORT_FILE="$GITHUB_WORKSPACE/$REPORT_FILE"
        echo "=== Base Log Started at $(date) ===" > "$LOG_FILE"
        echo '{"build_id":"base-${{ matrix.repo_config }}-$(date +%s)","start_time":"'$(date -Iseconds)'","steps":[],"errors":[],"warnings":[]}' > "$REPORT_FILE"
        log() { local level="$1" message="$2" step="${3:-$(caller | awk '{print $2}')}"; local timestamp=$(date '+%Y-%m-%d %H:%M:%S'); if [ ${LOG_LEVELS[$level]} -ge $CURRENT_LEVEL ]; then case $level in DEBUG) echo -e "\033[0;37m[$timestamp] [DEBUG] $message\033[0m" ;; INFO) echo -e "\033[0;34m[$timestamp] [INFO] $message\033[0m" ;; WARN) echo -e "\033[0;33m[$timestamp] [WARN] $message\033[0m" ;; ERROR) echo -e "\033[1;41;37m[$timestamp] [ERROR] $message\033[0m" ;; esac; echo "[$timestamp] [$level] [Step: $step] $message" >> "$LOG_FILE"; fi; }
        step_start() { local step_name="$1" description="$2"; log "INFO" "▶ 开始执行: $description" "$step_name"; }
        step_complete() { local step_name="$1" status="$2"; if [ "$status" = "success" ]; then log "INFO" "✅ 步骤完成: $step_name" "$step_name"; elif [ "$status" = "failed" ]; then log "ERROR" "❌ 步骤失败: $step_name" "$step_name"; fi; }
        export -f log step_start step_complete
        EOF
        chmod +x /tmp/logger.sh
        echo "LOGGER_SCRIPT=/tmp/logger.sh" >> $GITHUB_ENV
        source /tmp/logger.sh
        step_start "INIT" "初始化基础构建日志 (${{ matrix.repo_config }})"

    - name: 检出代码
      uses: actions/checkout@v4

    - name: 克隆仓库
      run: |
        source "$LOGGER_SCRIPT"
        step_start "CLONE_REPO" "克隆 ${{ matrix.repo_config }} 仓库"
        
        # 创建目录
        sudo mkdir -p ${{ env.OPENWRT_PATH }}
        sudo chown $USER:$USER ${{ env.OPENWRT_PATH }}
        
        # 克隆仓库
        git clone ${{ matrix.repo_url }} ${{ env.OPENWRT_PATH }}
        cd ${{ env.OPENWRT_PATH }}
        git checkout ${{ matrix.repo_branch }}
        
        step_complete "CLONE_REPO" "success"

    - name: 生成变量并检查配置
      id: generate_vars
      run: |
        source "$LOGGER_SCRIPT"
        step_start "GEN_VARS" "生成构建变量并检查配置"
        
        # 设置REPO_SHORT变量
        REPO_SHORT="${{ matrix.repo_config }}"
        echo "REPO_SHORT=$REPO_SHORT" >> $GITHUB_ENV
        
        # 打印关键环境变量和路径
        echo "DEBUG: GITHUB_WORKSPACE = $GITHUB_WORKSPACE"
        echo "DEBUG: OPENWRT_PATH = $OPENWRT_PATH"
        echo "DEBUG: CONFIG_BASE_DIR = $CONFIG_BASE_DIR"
        echo "DEBUG: REPO_SHORT = $REPO_SHORT"
        
        # 检查配置目录是否存在
        CONFIG_DIR_FULL_PATH="${GITHUB_WORKSPACE}/${CONFIG_BASE_DIR}"
        echo "DEBUG: 检查配置目录: $CONFIG_DIR_FULL_PATH"
        if [ ! -d "$CONFIG_DIR_FULL_PATH" ]; then
          echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
          echo "!!! 错误: 配置目录不存在: $CONFIG_DIR_FULL_PATH"
          echo "!!! 请检查您的仓库中是否包含 'configs' 文件夹。"
          echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
          exit 1
        fi
        ls -la "$CONFIG_DIR_FULL_PATH"
        
        # 封装配置检查函数
        check_luci_packages() {
          local config_file="$1"
          local step_name="$2"
          
          echo ""
          echo "=================================================================================="
          echo -e "\033[1;44;37m 🔍 检查 $step_name 配置中的 Luci 软件包 \033[0m"
          echo "=================================================================================="
          echo -e "\033[1;36m配置文件: $config_file\033[0m"
          echo ""
          
          local luci_packages=$(grep -E "^CONFIG_PACKAGE_luci-.+=y" "$config_file" | sort || true)
          
          if [ -n "$luci_packages" ]; then
            echo -e "\033[1;32m发现以下 Luci 软件包:\033[0m"
            echo "$luci_packages" | sed 's/^CONFIG_PACKAGE_//' | sed 's/=y//' | while read pkg; do
              echo -e "  \033[0;32m✓ $pkg\033[0m"
              log "INFO" "  - $pkg"
            done
          else
            echo -e "\033[1;33m(无 Luci 软件包)\033[0m"
            log "INFO" "  (无 Luci 软件包)"
          fi
          echo "=================================================================================="
          echo ""
        }
        
        check_defconfig_packages() {
          local before_packages="$1"
          local step_name="$2"
          
          echo ""
          echo "=================================================================================="
          echo -e "\033[1;44;37m 🔧 运行 defconfig 并检查 $step_name \033[0m"
          echo "=================================================================================="
          log "INFO" "运行 defconfig..."
          
          # 修复：执行 defconfig 并捕获所有输出，包括错误
          DEFCONFIG_OUTPUT=$(make defconfig 2>&1)
          DEFCONFIG_EXIT_CODE=$?
          
          # 如果 defconfig 失败，打印错误信息并退出
          if [ $DEFCONFIG_EXIT_CODE -ne 0 ]; then
            echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
            echo "!!! 致命错误: 'make defconfig' 执行失败!"
            echo "!!! 退出码: $DEFCONFIG_EXIT_CODE"
            echo "!!! 错误信息如下:"
            echo "$DEFCONFIG_OUTPUT"
            echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
            exit 1
          fi
          
          echo -e "\033[1;36mDefconfig 完成，正在分析软件包变化...\033[0m"
          echo ""
          
          local after_packages=$(grep -E "^CONFIG_PACKAGE_luci-.+=y" .config | sort || true)
          
          echo -e "\033[1;32mDefconfig后的最终 Luci 软件包列表:\033[0m"
          if [ -n "$after_packages" ]; then
            echo "$after_packages" | sed 's/^CONFIG_PACKAGE_//' | sed 's/=y//' | while read pkg; do
              echo -e "  \033[0;32m✓ $pkg\033[0m"
              log "INFO" "  - $pkg"
            done
          else
            echo -e "\033[1;33m(无 Luci 软件包)\033[0m"
            log "INFO" "  (无 Luci 软件包)"
          fi
          
          echo ""
          echo -e "\033[1;34m------------------- 软件包变化分析 -------------------\033[0m"
          
          local found_new=false
          echo "$after_packages" | sed 's/^CONFIG_PACKAGE_//' | sed 's/=y//' | while read pkg; do
            if ! echo "$before_packages" | grep -Fq "CONFIG_PACKAGE_${pkg}=y"; then
              if [ "$found_new" = false ]; then
                echo -e "\033[1;32m🔍 发现新增的 Luci 软件包:\033[0m"
                found_new=true
              fi
              echo -e "  \033[0;32m✅ $pkg\033[0m"
              log "INFO" "  ✅ $pkg"
            fi
          done
          
          if [ "$found_new" = false ]; then
            echo -e "\033[1;37mℹ️  无新增的 Luci 软件包\033[0m"
            log "INFO" "ℹ️  无新增的Luci软件包"
          fi
          
          echo ""
          
          local found_missing=false
          echo "$before_packages" | while read pkg_line; do
            local pkg=$(echo "$pkg_line" | sed 's/^CONFIG_PACKAGE_//' | sed 's/=y//')
            if ! echo "$after_packages" | grep -Fq "CONFIG_PACKAGE_${pkg}=y"; then
              if [ "$found_missing" = false ]; then
                echo -e "\033[1;31m⚠️  发现缺失的 Luci 软件包:\033[0m"
                found_missing=true
              fi
              echo -e "  \033[0;31m❌ $pkg\033[0m"
              log "WARN" "  ❌ $pkg"
            fi
          done
          
          if [ "$found_missing" = false ]; then
            echo -e "\033[1;37mℹ️  无缺失的 Luci 软件包\033[0m"
            log "INFO" "ℹ️  无缺失的Luci软件包"
          else
            echo -e "\n\033[1;31m注意：缺失的软件包可能是因为依赖不满足或已被移除\033[0m"
          fi
          
          echo "=================================================================================="
          echo ""
        }
        
        export -f check_luci_packages check_defconfig_packages
        
        find_config_file() { local base_name="$1"; local config_dir="${GITHUB_WORKSPACE}/${CONFIG_BASE_DIR}"; for ext in ".config" ".config.txt"; do if [ -f "${config_dir}/${base_name}${ext}" ]; then echo "${config_dir}/${base_name}${ext}"; return 0; fi; done; return 1; }
        
        # 查找配置文件并增加调试信息
        echo "DEBUG: 正在查找基础配置文件 'base_ipq60xx'..."
        CONFIG_BASE=$(find_config_file "base_ipq60xx")
        if [ $? -ne 0 ]; then
          echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
          echo "!!! 错误: 找不到基础配置文件 'base_ipq60xx.config'!"
          echo "!!! 请检查它是否存在于 $CONFIG_DIR_FULL_PATH 目录中。"
          echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
          exit 1
        fi
        echo "DEBUG: 找到基础配置文件: $CONFIG_BASE"

        echo "DEBUG: 正在查找分支配置文件 'base_${REPO_SHORT}'..."
        CONFIG_BRANCH=$(find_config_file "base_${REPO_SHORT}")
        if [ $? -ne 0 ]; then
          echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
          echo "!!! 错误: 找不到分支配置文件 'base_${REPO_SHORT}.config'!"
          echo "!!! 请检查它是否存在于 $CONFIG_DIR_FULL_PATH 目录中。"
          echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
          exit 1
        fi
        echo "DEBUG: 找到分支配置文件: $CONFIG_BRANCH"
        
        # 直接调用函数，不捕获输出
        check_luci_packages "$CONFIG_BASE" "基础配置"
        check_luci_packages "$CONFIG_BRANCH" "分支配置"
        
        # 合并配置文件
        log "INFO" "合并基础配置和分支配置..."
        cat "$CONFIG_BASE" "$CONFIG_BRANCH" > .config
        
        # 直接调用函数，不捕获输出
        check_luci_packages ".config" "合并后配置"
        
        # 先获取合并后的包列表，再调用检查函数
        MERGED_LUCI=$(grep -E "^CONFIG_PACKAGE_luci-.+=y" .config | sort || true)
        check_defconfig_packages "$MERGED_LUCI" "基础环境"
        
        # 为每个仓库设置输出变量
        echo "repo_short_${REPO_SHORT}=${REPO_SHORT}" >> $GITHUB_OUTPUT
        
        # 提取设备信息，增加健壮性
        DEVICE_INFO=$(cat .config | grep "^CONFIG_TARGET_BOARD=" | awk -F '"' '{print $2}' || echo "未知")
        if [ "$DEVICE_INFO" = "未知" ]; then
          DEVICE_INFO=$(cat .config | grep "^CONFIG_TARGET_ARCH_PACKAGES=" | awk -F '"' '{print $2}' || echo "未知")
        fi
        log "INFO" "设备信息: $DEVICE_INFO"
        step_complete "GEN_VARS" "success"

    - name: 安装依赖
      run: |
        source "$LOGGER_SCRIPT"
        step_start "INSTALL_DEPS" "安装构建依赖"
        cd ${{ env.OPENWRT_PATH }}
        
        # 更新包列表并安装依赖
        sudo apt-get update
        sudo apt-get install -y build-essential clang flex bison g++ gawk \
          gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
          python3-distutils python3-setuptools python3-yaml rsync unzip \
          zlib1g-dev file swig
        
        # 安装OpenWrt特定的依赖
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
        step_complete "INSTALL_DEPS" "success"

    - name: 构建基础环境
      run: |
        source "$LOGGER_SCRIPT"
        step_start "BUILD_BASE" "构建基础环境"
        cd ${{ env.OPENWRT_PATH }}
        
        # 构建工具链
        if make -j$(nproc) toolchain/install > /dev/null 2>&1; then
          log "INFO" "工具链构建成功"
        else
          log "ERROR" "工具链构建失败"
          exit 1
        fi
        
        step_complete "BUILD_BASE" "success"

    - name: 上传基础环境
      uses: actions/upload-artifact@v4
      with:
        name: base-env-${{ matrix.repo_config }}
        path: ${{ env.OPENWRT_PATH }}
        retention-days: 7

  # ==================== 阶段二：集中预编译通用软件包 ====================
  Prebuild-Packages:
    needs: Build-Bases
    runs-on: ubuntu-22.04
    steps:
    - name: 初始化日志系统
      run: |
        cat > /tmp/logger.sh << 'EOF'
        #!/bin/bash
        declare -A LOG_LEVELS=([DEBUG]=0 [INFO]=1 [WARN]=2 [ERROR]=3)
        CURRENT_LEVEL=${LOG_LEVELS[$BUILD_LOG_LEVEL]}
        LOG_FILE="$GITHUB_WORKSPACE/$BUILD_LOG_FILE"
        REPORT_FILE="$GITHUB_WORKSPACE/$REPORT_FILE"
        echo "=== Prebuild Log Started at $(date) ===" > "$LOG_FILE"
        echo '{"build_id":"prebuild-$(date +%s)","start_time":"'$(date -Iseconds)'","steps":[],"errors":[],"warnings":[]}' > "$REPORT_FILE"
        log() { local level="$1" message="$2" step="${3:-$(caller | awk '{print $2}')}"; local timestamp=$(date '+%Y-%m-%d %H:%M:%S'); if [ ${LOG_LEVELS[$level]} -ge $CURRENT_LEVEL ]; then case $level in DEBUG) echo -e "\033[0;37m[$timestamp] [DEBUG] $message\033[0m" ;; INFO) echo -e "\033[0;34m[$timestamp] [INFO] $message\033[0m" ;; WARN) echo -e "\033[0;33m[$timestamp] [WARN] $message\033[0m" ;; ERROR) echo -e "\033[1;41;37m[$timestamp] [ERROR] $message\033[0m" ;; esac; echo "[$timestamp] [$level] [Step: $step] $message" >> "$LOG_FILE"; fi; }
        step_start() { local step_name="$1" description="$2"; log "INFO" "▶ 开始执行: $description" "$step_name"; }
        step_complete() { local step_name="$1" status="$2"; if [ "$status" = "success" ]; then log "INFO" "✅ 步骤完成: $step_name" "$step_name"; elif [ "$status" = "failed" ]; then log "ERROR" "❌ 步骤失败: $step_name" "$step_name"; fi; }
        export -f log step_start step_complete
        EOF
        chmod +x /tmp/logger.sh
        echo "LOGGER_SCRIPT=/tmp/logger.sh" >> $GITHUB_ENV
        source /tmp/logger.sh
        step_start "INIT" "初始化预编译构建日志"

    - name: 检出代码
      uses: actions/checkout@v4

    - name: 创建目录
      run: |
        sudo mkdir -p ${{ env.OPENWRT_PATH }}
        sudo chown $USER:$USER ${{ env.OPENWRT_PATH }}

    - name: 下载基础环境
      uses: actions/download-artifact@v4
      with:
        name: base-env-openwrt
        path: ${{ env.OPENWRT_PATH }}

    - name: 生成"超级配置"并检查
      id: generate_super_config
      run: |
        source "$LOGGER_SCRIPT"
        step_start "GEN_SUPER_CONFIG" "生成包含所有变体软件包的超级配置"
        cd "$OPENWRT_PATH"
        
        check_luci_packages() {
          local config_file="$1"
          local step_name="$2"
          echo ""
          echo "=================================================================================="
          echo -e "\033[1;44;37m 🔍 检查 $step_name 配置中的 Luci 软件包 \033[0m"
          echo "=================================================================================="
          echo -e "\033[1;36m配置文件: $config_file\033[0m"
          echo ""
          local luci_packages=$(grep -E "^CONFIG_PACKAGE_luci-.+=y" "$config_file" | sort || true)
          if [ -n "$luci_packages" ]; then
            echo -e "\033[1;32m发现以下 Luci 软件包:\033[0m"
            echo "$luci_packages" | sed 's/^CONFIG_PACKAGE_//' | sed 's/=y//' | while read pkg; do
              echo -e "  \033[0;32m✓ $pkg\033[0m"
              log "INFO" "  - $pkg"
            done
          else
            echo -e "\033[1;33m(无 Luci 软件包)\033[0m"
            log "INFO" "  (无 Luci 软件包)"
          fi
          echo "=================================================================================="
          echo ""
        }
        
        check_defconfig_packages() {
          local before_packages="$1"
          local step_name="$2"
          echo ""
          echo "=================================================================================="
          echo -e "\033[1;44;37m 🔧 运行 defconfig 并检查 $step_name \033[0m"
          echo "=================================================================================="
          log "INFO" "运行 defconfig..."
          make defconfig > /dev/null 2>&1
          echo -e "\033[1;36mDefconfig 完成，正在分析软件包变化...\033[0m"
          echo ""
          local after_packages=$(grep -E "^CONFIG_PACKAGE_luci-.+=y" .config | sort || true)
          echo -e "\033[1;32mDefconfig后的最终 Luci 软件包列表:\033[0m"
          if [ -n "$after_packages" ]; then
            echo "$after_packages" | sed 's/^CONFIG_PACKAGE_//' | sed 's/=y//' | while read pkg; do
              echo -e "  \033[0;32m✓ $pkg\033[0m"
              log "INFO" "  - $pkg"
            done
          else
            echo -e "\033[1;33m(无 Luci 软件包)\033[0m"
            log "INFO" "  (无 Luci 软件包)"
          fi
          echo ""
          echo -e "\033[1;34m------------------- 软件包变化分析 -------------------\033[0m"
          local found_new=false
          echo "$after_packages" | sed 's/^CONFIG_PACKAGE_//' | sed 's/=y//' | while read pkg; do
            if ! echo "$before_packages" | grep -Fq "CONFIG_PACKAGE_${pkg}=y"; then
              if [ "$found_new" = false ]; then
                echo -e "\033[1;32m🔍 发现新增的 Luci 软件包:\033[0m"
                found_new=true
              fi
              echo -e "  \033[0;32m✅ $pkg\033[0m"
              log "INFO" "  ✅ $pkg"
            fi
          done
          if [ "$found_new" = false ]; then
            echo -e "\033[1;37mℹ️  无新增的 Luci 软件包\033[0m"
            log "INFO" "ℹ️  无新增的Luci软件包"
          fi
          echo ""
          local found_missing=false
          echo "$before_packages" | while read pkg_line; do
            local pkg=$(echo "$pkg_line" | sed 's/^CONFIG_PACKAGE_//' | sed 's/=y//')
            if ! echo "$after_packages" | grep -Fq "CONFIG_PACKAGE_${pkg}=y"; then
              if [ "$found_missing" = false ]; then
                echo -e "\033[1;31m⚠️  发现缺失的 Luci 软件包:\033[0m"
                found_missing=true
              fi
              echo -e "  \033[0;31m❌ $pkg\033[0m"
              log "WARN" "  ❌ $pkg"
            fi
          done
          if [ "$found_missing" = false ]; then
            echo -e "\033[1;37mℹ️  无缺失的 Luci 软件包\033[0m"
            log "INFO" "ℹ️  无缺失的Luci软件包"
          else
            echo -e "\n\033[1;31m注意：缺失的软件包可能是因为依赖不满足或已被移除\033[0m"
          fi
          echo "=================================================================================="
          echo ""
        }
        
        export -f check_luci_packages check_defconfig_packages
        
        echo "CONFIG_TARGET_ipq60xx=y" > .config
        echo "CONFIG_TARGET_ipq60xx_DEVICE_generic=y" >> .config
        echo "CONFIG_TARGET_DEVICE_ipq60xx_generic=y" >> .config
        
        # 直接调用函数
        check_luci_packages ".config" "基础配置"
        
        for variant in Pro Max Ultra; do
          log "INFO" "合并 $variant 配置"
          if [ -f "${{ env.CONFIG_BASE_DIR }}/${variant}.config" ]; then
            # 直接调用函数
            check_luci_packages "${{ env.CONFIG_BASE_DIR }}/${variant}.config" "$variant 配置"
            cat "${{ env.CONFIG_BASE_DIR }}/${variant}.config" >> .config
          else
            log "WARN" "配置文件不存在: ${{ env.CONFIG_BASE_DIR }}/${variant}.config"
          fi
        done
        
        # 直接调用函数
        check_luci_packages ".config" "超级配置合并后"
        
        # 先获取包列表，再调用检查函数
        MERGED_LUCI=$(grep -E "^CONFIG_PACKAGE_luci-.+=y" .config | sort || true)
        check_defconfig_packages "$MERGED_LUCI" "超级配置"
        
        log "INFO" "超级配置生成完成"
        step_complete "GEN_SUPER_CONFIG" "success"

    - name: 缓存预编译软件包
      uses: actions/cache@v4
      with:
        key: ${{ env.CACHE_VERSION }}-prebuilt-packages-ipq60xx-${{ hashFiles('configs/Pro.config', 'configs/Max.config', 'configs/Ultra.config') }}
        path: |
          ${{ env.OPENWRT_PATH }}/staging_dir
          ${{ env.OPENWRT_PATH }}/build_dir
          ${{ env.OPENWRT_PATH }}/dl

    - name: 预编译所有第三方软件包（并行模式）
      id: prebuild_parallel
      continue-on-error: true
      run: |
        source "$LOGGER_SCRIPT"
        step_start "PREBUILD_PKGS_PARALLEL" "预编译所有第三方软件包（并行模式）"
        cd "$OPENWRT_PATH"
        
        BUILD_LOG="$GITHUB_WORKSPACE/prebuild_parallel.log"
        
        PACKAGES=$(grep -E "^CONFIG_PACKAGE_luci-.+=y" .config | sed 's/CONFIG_PACKAGE_//' | sed 's/=y//' | tr '\n' ' ')
        if [ -z "$PACKAGES" ]; then
          log "WARN" "未找到需要预编译的 Luci 软件包，跳过编译。"
          echo "status=success" >> $GITHUB_OUTPUT
          step_complete "PREBUILD_PKGS_PARALLEL" "success"
        else
          log "INFO" "即将预编译的软件包: $PACKAGES"
          if make -j$(nproc) $PACKAGES > "$BUILD_LOG" 2>&1; then
            log "INFO" "并行预编译成功"
            echo "status=success" >> $GITHUB_OUTPUT
            step_complete "PREBUILD_PKGS_PARALLEL" "success"
          else
            log "ERROR" "并行预编译失败，将尝试单线程编译"
            echo "status=failed" >> $GITHUB_OUTPUT
            step_complete "PREBUILD_PKGS_PARALLEL" "failed"
            exit 1
          fi
        fi

    - name: 预编译所有第三方软件包（单线程模式）
      id: prebuild_serial
      if: steps.prebuild_parallel.outcome == 'failure'
      run: |
        source "$LOGGER_SCRIPT"
        step_start "PREBUILD_PKGS_SERIAL" "预编译所有第三方软件包（单线程详细模式）"
        cd "$OPENWRT_PATH"
        
        BUILD_LOG="$GITHUB_WORKSPACE/prebuild_serial.log"
        
        PACKAGES=$(grep -E "^CONFIG_PACKAGE_luci-.+=y" .config | sed 's/CONFIG_PACKAGE_//' | sed 's/=y//' | tr '\n' ' ')
        
        log "INFO" "开始单线程详细预编译软件包: $PACKAGES"
        if make -j1 V=s $PACKAGES > "$BUILD_LOG" 2>&1; then
          log "INFO" "单线程预编译成功"
          echo "status=success" >> $GITHUB_OUTPUT
          step_complete "PREBUILD_PKGS_SERIAL" "success"
        else
          log "ERROR" "单线程预编译也失败了"
          
          log "ERROR" "预编译错误详情（最后20行）："
          tail -20 "$BUILD_LOG" | while read line; do
            log "ERROR" "$line"
          done
          
          echo "status=failed" >> $GITHUB_OUTPUT
          step_complete "PREBUILD_PKGS_SERIAL" "failed"
          exit 1
        fi

    - name: 上传预编译日志
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: prebuild-logs
        path: |
          ${{ github.workspace }}/prebuild_parallel.log
          ${{ github.workspace }}/prebuild_serial.log
        retention-days: 7

    - name: 上传预编译软件包
      if: steps.prebuild_parallel.outcome == 'success' || steps.prebuild_serial.outcome == 'success'
      uses: actions/upload-artifact@v4
      with:
        name: prebuilt-packages-ipq60xx
        path: ${{ env.OPENWRT_PATH }}/staging_dir
        retention-days: 7

  # ==================== 阶段三：并行组装变体固件 ====================
  Assemble-Variants:
    needs: [Build-Bases, Prebuild-Packages]
    if: success() && needs.Prebuild-Packages.result == 'success'
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        repo: ['openwrt', 'immwrt', 'libwrt']
        variant: ['Pro', 'Max', 'Ultra']
    
    steps:
    - name: 初始化日志系统
      run: |
        cat > /tmp/logger.sh << 'EOF'
        #!/bin/bash
        declare -A LOG_LEVELS=([DEBUG]=0 [INFO]=1 [WARN]=2 [ERROR]=3)
        CURRENT_LEVEL=${LOG_LEVELS[$BUILD_LOG_LEVEL]}
        LOG_FILE="$GITHUB_WORKSPACE/$BUILD_LOG_FILE"
        REPORT_FILE="$GITHUB_WORKSPACE/$REPORT_FILE"
        echo "=== Variant Log Started at $(date) ===" > "$LOG_FILE"
        echo '{"build_id":"variant-${{ matrix.repo }}-${{ matrix.variant }}-$(date +%s)","start_time":"'$(date -Iseconds)'","steps":[],"errors":[],"warnings":[]}' > "$REPORT_FILE"
        log() { local level="$1" message="$2" step="${3:-$(caller | awk '{print $2}')}"; local timestamp=$(date '+%Y-%m-%d %H:%M:%S'); if [ ${LOG_LEVELS[$level]} -ge $CURRENT_LEVEL ]; then case $level in DEBUG) echo -e "\033[0;37m[$timestamp] [DEBUG] $message\033[0m" ;; INFO) echo -e "\033[0;34m[$timestamp] [INFO] $message\033[0m" ;; WARN) echo -e "\033[0;33m[$timestamp] [WARN] $message\033[0m" ;; ERROR) echo -e "\033[1;41;37m[$timestamp] [ERROR] $message\033[0m" ;; esac; echo "[$timestamp] [$level] [Step: $step] $message" >> "$LOG_FILE"; fi; }
        step_start() { local step_name="$1" description="$2"; log "INFO" "▶ 开始执行: $description" "$step_name"; }
        step_complete() { local step_name="$1" status="$2"; if [ "$status" = "success" ]; then log "INFO" "✅ 步骤完成: $step_name" "$step_name"; elif [ "$status" = "failed" ]; then log "ERROR" "❌ 步骤失败: $step_name" "$step_name"; fi; }
        export -f log step_start step_complete
        EOF
        chmod +x /tmp/logger.sh
        echo "LOGGER_SCRIPT=/tmp/logger.sh" >> $GITHUB_ENV
        source /tmp/logger.sh
        step_start "INIT" "初始化变体组装日志 (${{ matrix.repo }}-${{ matrix.variant }})"

    - name: 检出代码
      uses: actions/checkout@v4

    - name: 创建目录
      run: |
        sudo mkdir -p ${{ env.OPENWRT_PATH }}
        sudo chown $USER:$USER ${{ env.OPENWRT_PATH }}

    - name: 下载基础环境
      uses: actions/download-artifact@v4
      with:
        name: base-env-${{ matrix.repo }}
        path: ${{ env.OPENWRT_PATH }}

    - name: 下载预编译软件包
      uses: actions/download-artifact@v4
      with:
        name: prebuilt-packages-ipq60xx
        path: ${{ env.OPENWRT_PATH }}/staging_dir

    - name: 准备变体配置并检查
      run: |
        source "$LOGGER_SCRIPT"
        step_start "PREP_VARIANT" "准备变体配置 (${{ matrix.variant }})"
        cd "$OPENWRT_PATH"
        
        check_luci_packages() {
          local config_file="$1"
          local step_name="$2"
          echo ""
          echo "=================================================================================="
          echo -e "\033[1;44;37m 🔍 检查 $step_name 配置中的 Luci 软件包 \033[0m"
          echo "=================================================================================="
          echo -e "\033[1;36m配置文件: $config_file\033[0m"
          echo ""
          local luci_packages=$(grep -E "^CONFIG_PACKAGE_luci-.+=y" "$config_file" | sort || true)
          if [ -n "$luci_packages" ]; then
            echo -e "\033[1;32m发现以下 Luci 软件包:\033[0m"
            echo "$luci_packages" | sed 's/^CONFIG_PACKAGE_//' | sed 's/=y//' | while read pkg; do
              echo -e "  \033[0;32m✓ $pkg\033[0m"
              log "INFO" "  - $pkg"
            done
          else
            echo -e "\033[1;33m(无 Luci 软件包)\033[0m"
            log "INFO" "  (无 Luci 软件包)"
          fi
          echo "=================================================================================="
          echo ""
        }
        
        check_defconfig_packages() {
          local before_packages="$1"
          local step_name="$2"
          echo ""
          echo "=================================================================================="
          echo -e "\033[1;44;37m 🔧 运行 defconfig 并检查 $step_name \033[0m"
          echo "=================================================================================="
          log "INFO" "运行 defconfig..."
          make defconfig > /dev/null 2>&1
          echo -e "\033[1;36mDefconfig 完成，正在分析软件包变化...\033[0m"
          echo ""
          local after_packages=$(grep -E "^CONFIG_PACKAGE_luci-.+=y" .config | sort || true)
          echo -e "\033[1;32mDefconfig后的最终 Luci 软件包列表:\033[0m"
          if [ -n "$after_packages" ]; then
            echo "$after_packages" | sed 's/^CONFIG_PACKAGE_//' | sed 's/=y//' | while read pkg; do
              echo -e "  \033[0;32m✓ $pkg\033[0m"
              log "INFO" "  - $pkg"
            done
          else
            echo -e "\033[1;33m(无 Luci 软件包)\033[0m"
            log "INFO" "  (无 Luci 软件包)"
          fi
          echo ""
          echo -e "\033[1;34m------------------- 软件包变化分析 -------------------\033[0m"
          local found_new=false
          echo "$after_packages" | sed 's/^CONFIG_PACKAGE_//' | sed 's/=y//' | while read pkg; do
            if ! echo "$before_packages" | grep -Fq "CONFIG_PACKAGE_${pkg}=y"; then
              if [ "$found_new" = false ]; then
                echo -e "\033[1;32m🔍 发现新增的 Luci 软件包:\033[0m"
                found_new=true
              fi
              echo -e "  \033[0;32m✅ $pkg\033[0m"
              log "INFO" "  ✅ $pkg"
            fi
          done
          if [ "$found_new" = false ]; then
            echo -e "\033[1;37mℹ️  无新增的 Luci 软件包\033[0m"
            log "INFO" "ℹ️  无新增的Luci软件包"
          fi
          echo ""
          local found_missing=false
          echo "$before_packages" | while read pkg_line; do
            local pkg=$(echo "$pkg_line" | sed 's/^CONFIG_PACKAGE_//' | sed 's/=y//')
            if ! echo "$after_packages" | grep -Fq "CONFIG_PACKAGE_${pkg}=y"; then
              if [ "$found_missing" = false ]; then
                echo -e "\033[1;31m⚠️  发现缺失的 Luci 软件包:\033[0m"
                found_missing=true
              fi
              echo -e "  \033[0;31m❌ $pkg\033[0m"
              log "WARN" "  ❌ $pkg"
            fi
          done
          if [ "$found_missing" = false ]; then
            echo -e "\033[1;37mℹ️  无缺失的 Luci 软件包\033[0m"
            log "INFO" "ℹ️  无缺失的Luci软件包"
          else
            echo -e "\n\033[1;31m注意：缺失的软件包可能是因为依赖不满足或已被移除\033[0m"
          fi
          echo "=================================================================================="
          echo ""
        }
        
        export -f check_luci_packages check_defconfig_packages
        
        find_config_file() { local base_name="$1"; local config_dir="${GITHUB_WORKSPACE}/${CONFIG_BASE_DIR}"; for ext in ".config" ".config.txt"; do if [ -f "${config_dir}/${base_name}${ext}" ]; then echo "${config_dir}/${base_name}${ext}"; return 0; fi; done; return 1; }
        
        CONFIG_BASE=$(find_config_file "base_ipq60xx")
        CONFIG_VARIANT=$(find_config_file "${{ matrix.variant }}")
        
        # 直接调用函数
        check_luci_packages "$CONFIG_BASE" "基础配置"
        check_luci_packages "$CONFIG_VARIANT" "${{ matrix.variant }} 配置"
        
        cat "$CONFIG_BASE" "$CONFIG_VARIANT" > .config.tmp && mv .config.tmp .config
        
        # 直接调用函数
        check_luci_packages ".config" "变体合并后配置"
        
        # 先获取包列表，再调用检查函数
        MERGED_LUCI=$(grep -E "^CONFIG_PACKAGE_luci-.+=y" .config | sort || true)
        check_defconfig_packages "$MERGED_LUCI" "变体 ${{ matrix.variant }}"
        
        step_complete "PREP_VARIANT" "success"

    - name: 组装固件（并行模式）
      id: assemble_parallel
      continue-on-error: true
      run: |
        source "$LOGGER_SCRIPT"
        step_start "ASSEMBLE_FIRMWARE_PARALLEL" "组装最终固件（并行模式）"
        cd "$OPENWRT_PATH"
        
        BUILD_LOG="$GITHUB_WORKSPACE/assemble_parallel.log"
        
        if make -j$(nproc) > "$BUILD_LOG" 2>&1; then
          log "INFO" "并行组装固件成功"
          echo "status=success" >> $GITHUB_OUTPUT
          step_complete "ASSEMBLE_FIRMWARE_PARALLEL" "success"
        else
          log "ERROR" "并行组装固件失败，将尝试单线程组装"
          echo "status=failed" >> $GITHUB_OUTPUT
          step_complete "ASSEMBLE_FIRMWARE_PARALLEL" "failed"
          exit 1
        fi

    - name: 组装固件（单线程模式）
      id: assemble_serial
      if: steps.assemble_parallel.outcome == 'failure'
      run: |
        source "$LOGGER_SCRIPT"
        step_start "ASSEMBLE_FIRMWARE_SERIAL" "组装最终固件（单线程详细模式）"
        cd "$OPENWRT_PATH"
        
        BUILD_LOG="$GITHUB_WORKSPACE/assemble_serial.log"
        
        if make -j1 V=s > "$BUILD_LOG" 2>&1; then
          log "INFO" "单线程组装固件成功"
          echo "status=success" >> $GITHUB_OUTPUT
          step_complete "ASSEMBLE_FIRMWARE_SERIAL" "success"
        else
          log "ERROR" "单线程组装固件也失败了"
          
          log "ERROR" "组装固件错误详情（最后20行）："
          tail -20 "$BUILD_LOG" | while read line; do
            log "ERROR" "$line"
          done
          
          echo "status=failed" >> $GITHUB_OUTPUT
          step_complete "ASSEMBLE_FIRMWARE_SERIAL" "failed"
          exit 1
        fi

    - name: 上传固件产物
      if: steps.assemble_parallel.outcome == 'success' || steps.assemble_serial.outcome == 'success'
      uses: actions/upload-artifact@v4
      with:
        name: firmware-${{ matrix.repo }}-${{ matrix.variant }}-${{ env.FILE_DATE }}
        path: ${{ env.OPENWRT_PATH }}/bin/targets/
        retention-days: 30

    - name: 上传构建日志
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: logs-${{ matrix.repo }}-${{ matrix.variant }}-${{ env.FILE_DATE }}
        path: |
          ${{ github.workspace }}/$BUILD_LOG_FILE
          ${{ github.workspace }}/$REPORT_FILE
          ${{ github.workspace }}/assemble_parallel.log
          ${{ github.workspace }}/assemble_serial.log
        retention-days: 7
