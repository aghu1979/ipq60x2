name: IPQ60XX-Triple-Stage-Build

on:
  workflow_dispatch:
    inputs:
      repo_config:
        description: '选择要构建的仓库 (留空则构建所有)'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - openwrt
          - immwrt
          - libwrt
  workflow_call:

env:
  TZ: Asia/Shanghai
  OPENWRT_PATH: /mnt/openwrt
  CONFIG_BASE_DIR: configs
  DIY_SCRIPT_DIR: scripts
  CACHE_VERSION: v3
  LOG_LEVEL: INFO
  LOG_FILE: build.log
  REPORT_FILE: build_report.json

jobs:
  # ==================== 阶段一：并行构建基础环境 ====================
  Build-Bases:
    if: github.event.inputs.repo_config == 'all' || github.event.inputs.repo_config == ''
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        repo_config: ['openwrt', 'immwrt', 'libwrt']
    
    outputs:
      repo_short_openwrt: ${{ steps.generate_vars_openwrt.outputs.repo_short }}
      repo_short_immwrt: ${{ steps.generate_vars_immwrt.outputs.repo_short }}
      repo_short_libwrt: ${{ steps.generate_vars_libwrt.outputs.repo_short }}

    steps:
    - name: 初始化日志系统
      run: |
        cat > /tmp/logger.sh << 'EOF'
        #!/bin/bash
        declare -A LOG_LEVELS=([DEBUG]=0 [INFO]=1 [WARN]=2 [ERROR]=3)
        CURRENT_LEVEL=${LOG_LEVELS[$LOG_LEVEL]}
        LOG_FILE="$GITHUB_WORKSPACE/$LOG_FILE"
        REPORT_FILE="$GITHUB_WORKSPACE/$REPORT_FILE"
        echo "=== Build Log Started at $(date) ===" > "$LOG_FILE"
        echo '{"build_id":"base-'${{ matrix.repo_config }}'-$(date +%s)","start_time":"'$(date -Iseconds)'","steps":[],"errors":[],"warnings":[]}' > "$REPORT_FILE"
        log() { local level="$1" message="$2" step="${3:-$(caller | awk '{print $2}')}"; local timestamp=$(date '+%Y-%m-%d %H:%M:%S'); if [ ${LOG_LEVELS[$level]} -ge $CURRENT_LEVEL ]; then case $level in DEBUG) echo -e "\033[0;37m[$timestamp] [DEBUG] $message\033[0m" ;; INFO) echo -e "\033[0;34m[$timestamp] [INFO] $message\033[0m" ;; WARN) echo -e "\033[0;33m[$timestamp] [WARN] $message\033[0m" ;; ERROR) echo -e "\033[1;41;37m[$timestamp] [ERROR] $message\033[0m" ;; esac; echo "[$timestamp] [$level] [Step: $step] $message" >> "$LOG_FILE"; fi; }
        step_start() { local step_name="$1" description="$2"; log "INFO" "▶ 开始执行: $description" "$step_name"; }
        step_complete() { local step_name="$1" status="$2"; if [ "$status" = "success" ]; then log "INFO" "✅ 步骤完成: $step_name" "$step_name"; elif [ "$status" = "failed" ]; then log "ERROR" "❌ 步骤失败: $step_name" "$step_name"; fi; }
        export -f log step_start step_complete
        EOF
        chmod +x /tmp/logger.sh
        echo "LOGGER_SCRIPT=/tmp/logger.sh" >> $GITHUB_ENV
        source /tmp/logger.sh
        step_start "INIT" "初始化基础环境构建日志"

    - name: 检出代码
      uses: actions/checkout@v4

    - name: 读取仓库配置
      id: read_repo_config
      run: |
        source "$LOGGER_SCRIPT"
        step_start "READ_CONFIG" "读取仓库配置 (${{ matrix.repo_config }})"
        REPO_CONFIG_FILE="${GITHUB_WORKSPACE}/${CONFIG_BASE_DIR}/repos.json"
        REPO_INFO=$(jq -r --arg repo "${{ matrix.repo_config }}" '.[$repo]' "$REPO_CONFIG_FILE")
        if [ "$REPO_INFO" = "null" ]; then log "ERROR" "未找到仓库配置: ${{ matrix.repo_config }}"; exit 1; fi
        echo "REPO_URL=$(echo "$REPO_INFO" | jq -r '.url')" >> $GITHUB_ENV
        echo "REPO_BRANCH=$(echo "$REPO_INFO" | jq -r '.branch')" >> $GITHUB_ENV
        echo "REPO_SHORT=$(echo "$REPO_INFO" | jq -r '.short')" >> $GITHUB_ENV
        log "INFO" "仓库: ${{ matrix.repo_config }} ($REPO_URL)"
        step_complete "READ_CONFIG" "success"

    - name: 克隆源代码
      run: |
        source "$LOGGER_SCRIPT"
        step_start "CLONE" "克隆源代码"
        sudo mkdir -p "$OPENWRT_PATH" && sudo chown -R $(id -u):$(id -g) "$OPENWRT_PATH"
        git clone --depth 1 -b "$REPO_BRANCH" --single-branch "$REPO_URL" "$OPENWRT_PATH"
        step_complete "CLONE" "success"

    - name: 生成变量
      id: generate_vars_${{ matrix.repo_config }}
      run: |
        source "$LOGGER_SCRIPT"
        step_start "GEN_VARS" "生成构建变量"
        find_config_file() { local base_name="$1"; local config_dir="${GITHUB_WORKSPACE}/${CONFIG_BASE_DIR}"; for ext in ".config" ".config.txt"; do if [ -f "${config_dir}/${base_name}${ext}" ]; then echo "${config_dir}/${base_name}${ext}"; return 0; fi; done; return 1; }
        CONFIG_BASE=$(find_config_file "base_ipq60xx")
        CONFIG_BRANCH=$(find_config_file "base_${REPO_SHORT}")
        cp "$CONFIG_BASE" "$OPENWRT_PATH/.config"
        cd "$OPENWRT_PATH" && make defconfig > /dev/null 2>&1
        echo "repo_short=${REPO_SHORT}" >> $GITHUB_OUTPUT
        log "INFO" "设备信息: $(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')"
        step_complete "GEN_VARS" "success"

    - name: 缓存工具链和Feeds
      uses: actions/cache@v4
      with:
        key: ${{ env.CACHE_VERSION }}-base-${{ steps.generate_vars_${{ matrix.repo_config }}.outputs.repo_short }}-${{ env.REPO_BRANCH }}-${{ hashFiles('**/feeds.conf.default') }}
        path: |
          ${{ env.OPENWRT_PATH }}/staging_dir
          ${{ env.OPENWRT_PATH }}/dl
          ${{ env.OPENWRT_PATH }}/feeds
          ${{ env.OPENWRT_PATH }}/build_dir

    - name: 准备构建环境
      run: |
        source "$LOGGER_SCRIPT"
        step_start "PREP_ENV" "准备构建环境"
        cd "$OPENWRT_PATH"
        if [ ! -d "feeds" ]; then ./scripts/feeds update -a; fi
        ./scripts/feeds install -a
        if [ -f "${{ env.DIY_SCRIPT_DIR }}/diy.sh" ]; then chmod +x "${{ env.DIY_SCRIPT_DIR }}/diy.sh" && "${{ env.DIY_SCRIPT_DIR }}/diy.sh"; fi
        step_complete "PREP_ENV" "success"

    - name: 编译基础环境
      run: |
        source "$LOGGER_SCRIPT"
        step_start "COMPILE_BASE" "编译基础环境"
        cd "$OPENWRT_PATH"
        make -j$(nproc) toolchain/kernel-headers compile
        step_complete "COMPILE_BASE" "success"

    - name: 上传基础环境
      uses: actions/upload-artifact@v4
      with:
        name: base-env-${{ steps.generate_vars_${{ matrix.repo_config }}.outputs.repo_short }}
        path: ${{ env.OPENWRT_PATH }}
        retention-days: 7

  # ==================== 阶段二：集中预编译通用软件包 ====================
  Prebuild-Packages:
    needs: Build-Bases
    runs-on: ubuntu-22.04
    steps:
    - name: 初始化日志系统
      run: |
        cat > /tmp/logger.sh << 'EOF'
        #!/bin/bash
        declare -A LOG_LEVELS=([DEBUG]=0 [INFO]=1 [WARN]=2 [ERROR]=3)
        CURRENT_LEVEL=${LOG_LEVELS[$LOG_LEVEL]}
        LOG_FILE="$GITHUB_WORKSPACE/$LOG_FILE"
        REPORT_FILE="$GITHUB_WORKSPACE/$REPORT_FILE"
        echo "=== Prebuild Log Started at $(date) ===" > "$LOG_FILE"
        echo '{"build_id":"prebuild-$(date +%s)","start_time":"'$(date -Iseconds)'","steps":[],"errors":[],"warnings":[]}' > "$REPORT_FILE"
        log() { local level="$1" message="$2" step="${3:-$(caller | awk '{print $2}')}"; local timestamp=$(date '+%Y-%m-%d %H:%M:%S'); if [ ${LOG_LEVELS[$level]} -ge $CURRENT_LEVEL ]; then case $level in DEBUG) echo -e "\033[0;37m[$timestamp] [DEBUG] $message\033[0m" ;; INFO) echo -e "\033[0;34m[$timestamp] [INFO] $message\033[0m" ;; WARN) echo -e "\033[0;33m[$timestamp] [WARN] $message\033[0m" ;; ERROR) echo -e "\033[1;41;37m[$timestamp] [ERROR] $message\033[0m" ;; esac; echo "[$timestamp] [$level] [Step: $step] $message" >> "$LOG_FILE"; fi; }
        step_start() { local step_name="$1" description="$2"; log "INFO" "▶ 开始执行: $description" "$step_name"; }
        step_complete() { local step_name="$1" status="$2"; if [ "$status" = "success" ]; then log "INFO" "✅ 步骤完成: $step_name" "$step_name"; elif [ "$status" = "failed" ]; then log "ERROR" "❌ 步骤失败: $step_name" "$step_name"; fi; }
        export -f log step_start step_complete
        EOF
        chmod +x /tmp/logger.sh
        echo "LOGGER_SCRIPT=/tmp/logger.sh" >> $GITHUB_ENV
        source /tmp/logger.sh
        step_start "INIT" "初始化预编译构建日志"

    - name: 检出代码
      uses: actions/checkout@v4

    - name: 下载基础环境
      uses: actions/download-artifact@v4
      with:
        name: base-env-${{ needs.Build-Bases.outputs.repo_short_openwrt }}
        path: ${{ env.OPENWRT_PATH }}

    - name: 生成“超级配置”
      id: generate_super_config
      run: |
        source "$LOGGER_SCRIPT"
        step_start "GEN_SUPER_CONFIG" "生成包含所有变体软件包的超级配置"
        cd "$OPENWRT_PATH"
        echo "CONFIG_TARGET_ipq60xx=y" > .config
        echo "CONFIG_TARGET_ipq60xx_DEVICE_generic=y" >> .config
        echo "CONFIG_TARGET_DEVICE_ipq60xx_generic=y" >> .config
        
        for variant in Pro Max Ultra; do
          log "INFO" "合并 $variant 配置"
          if [ -f "${{ env.CONFIG_BASE_DIR }}/${variant}.config" ]; then
            cat "${{ env.CONFIG_BASE_DIR }}/${variant}.config" >> .config
          else
            log "WARN" "配置文件不存在: ${{ env.CONFIG_BASE_DIR }}/${variant}.config"
          fi
        done
        
        log "INFO" "运行 defconfig 解析依赖..."
        make defconfig
        log "INFO" "超级配置生成完成"
        step_complete "GEN_SUPER_CONFIG" "success"

    - name: 缓存预编译软件包
      uses: actions/cache@v4
      with:
        key: ${{ env.CACHE_VERSION }}-prebuilt-packages-ipq60xx-${{ hashFiles('configs/Pro.config', 'configs/Max.config', 'configs/Ultra.config') }}
        path: |
          ${{ env.OPENWRT_PATH }}/staging_dir
          ${{ env.OPENWRT_PATH }}/build_dir
          ${{ env.OPENWRT_PATH }}/dl

    - name: 预编译所有第三方软件包
      run: |
        source "$LOGGER_SCRIPT"
        step_start "PREBUILD_PKGS" "预编译所有第三方软件包"
        cd "$OPENWRT_PATH"
        
        # 提取所有 luci-开头的包
        PACKAGES=$(grep "^CONFIG_PACKAGE_luci-.*=y" .config | sed 's/CONFIG_PACKAGE_//' | sed 's/=y//' | tr '\n' ' ')
        if [ -z "$PACKAGES" ]; then
          log "WARN" "未找到需要预编译的 Luci 软件包，跳过编译。"
        else
          log "INFO" "即将预编译的软件包: $PACKAGES"
          make -j$(nproc) $PACKAGES/compile
        fi
        
        step_complete "PREBUILD_PKGS" "success"

    - name: 上传预编译软件包
      uses: actions/upload-artifact@v4
      with:
        name: prebuilt-packages-ipq60xx
        path: ${{ env.OPENWRT_PATH }}/staging_dir
        retention-days: 7

  # ==================== 阶段三：并行组装变体固件 ====================
  Assemble-Variants:
    needs: [Build-Bases, Prebuild-Packages]
    if: success() && needs.Prebuild-Packages.result == 'success'
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        repo: ['openwrt', 'immwrt', 'libwrt']
        variant: ['Pro', 'Max', 'Ultra']
    
    steps:
    - name: 初始化日志系统
      run: |
        cat > /tmp/logger.sh << 'EOF'
        #!/bin/bash
        declare -A LOG_LEVELS=([DEBUG]=0 [INFO]=1 [WARN]=2 [ERROR]=3)
        CURRENT_LEVEL=${LOG_LEVELS[$LOG_LEVEL]}
        LOG_FILE="$GITHUB_WORKSPACE/$LOG_FILE"
        REPORT_FILE="$GITHUB_WORKSPACE/$REPORT_FILE"
        echo "=== Variant Log Started at $(date) ===" > "$LOG_FILE"
        echo '{"build_id":"variant-${{ matrix.repo }}-${{ matrix.variant }}-$(date +%s)","start_time":"'$(date -Iseconds)'","steps":[],"errors":[],"warnings":[]}' > "$REPORT_FILE"
        log() { local level="$1" message="$2" step="${3:-$(caller | awk '{print $2}')}"; local timestamp=$(date '+%Y-%m-%d %H:%M:%S'); if [ ${LOG_LEVELS[$level]} -ge $CURRENT_LEVEL ]; then case $level in DEBUG) echo -e "\033[0;37m[$timestamp] [DEBUG] $message\033[0m" ;; INFO) echo -e "\033[0;34m[$timestamp] [INFO] $message\033[0m" ;; WARN) echo -e "\033[0;33m[$timestamp] [WARN] $message\033[0m" ;; ERROR) echo -e "\033[1;41;37m[$timestamp] [ERROR] $message\033[0m" ;; esac; echo "[$timestamp] [$level] [Step: $step] $message" >> "$LOG_FILE"; fi; }
        step_start() { local step_name="$1" description="$2"; log "INFO" "▶ 开始执行: $description" "$step_name"; }
        step_complete() { local step_name="$1" status="$2"; if [ "$status" = "success" ]; then log "INFO" "✅ 步骤完成: $step_name" "$step_name"; elif [ "$status" = "failed" ]; then log "ERROR" "❌ 步骤失败: $step_name" "$step_name"; fi; }
        export -f log step_start step_complete
        EOF
        chmod +x /tmp/logger.sh
        echo "LOGGER_SCRIPT=/tmp/logger.sh" >> $GITHUB_ENV
        source /tmp/logger.sh
        step_start "INIT" "初始化变体组装日志 (${{ matrix.repo }}-${{ matrix.variant }})"

    - name: 下载基础环境
      uses: actions/download-artifact@v4
      with:
        name: base-env-${{ matrix.repo }}
        path: ${{ env.OPENWRT_PATH }}

    - name: 下载预编译软件包
      uses: actions/download-artifact@v4
      with:
        name: prebuilt-packages-ipq60xx
        path: ${{ env.OPENWRT_PATH }}/staging_dir # 覆盖staging_dir

    - name: 准备变体配置
      run: |
        source "$LOGGER_SCRIPT"
        step_start "PREP_VARIANT" "准备变体配置 (${{ matrix.variant }})"
        cd "$OPENWRT_PATH"
        find_config_file() { local base_name="$1"; local config_dir="${GITHUB_WORKSPACE}/${CONFIG_BASE_DIR}"; for ext in ".config" ".config.txt"; do if [ -f "${config_dir}/${base_name}${ext}" ]; then echo "${config_dir}/${base_name}${ext}"; return 0; fi; done; return 1; }
        CONFIG_BASE=$(find_config_file "base_ipq60xx")
        CONFIG_VARIANT=$(find_config_file "${{ matrix.variant }}")
        cat "$CONFIG_BASE" "$CONFIG_VARIANT" > .config.tmp && mv .config.tmp .config
        make defconfig
        step_complete "PREP_VARIANT" "success"

    - name: 组装固件
      run: |
        source "$LOGGER_SCRIPT"
        step_start "ASSEMBLE_FIRMWARE" "组装最终固件"
        cd "$OPENWRT_PATH"
        make -j$(nproc) # 此步骤会非常快
        step_complete "ASSEMBLE_FIRMWARE" "success"

    - name: 上传固件产物
      uses: actions/upload-artifact@v4
      with:
        name: firmware-${{ matrix.repo }}-${{ matrix.variant }}-${{ env.FILE_DATE }}
        path: ${{ env.OPENWRT_PATH }}/bin/targets/
        retention-days: 30

    - name: 上传构建日志
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: logs-${{ matrix.repo }}-${{ matrix.variant }}-${{ env.FILE_DATE }}
        path: |
          ${{ github.workspace }}/$LOG_FILE
          ${{ github.workspace }}/$REPORT_FILE
        retention-days: 7
