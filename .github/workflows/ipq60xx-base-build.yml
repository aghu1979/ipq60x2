name: IPQ60XX-Base-Build

on:
  workflow_dispatch:
  workflow_call:

env:
  # 基础配置
  TZ: Asia/Shanghai
  OPENWRT_PATH: /mnt/openwrt
  
  # 仓库配置 - 使用变量以便扩展
  CONFIG_BASE_DIR: configs
  DIY_SCRIPT_DIR: scripts
  
  # 构建配置
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: false  # 根据要求，不需要发布release
  
  # 缓存配置
  CACHE_DATE: $(date +"%Y-%m-%d")

jobs:
  Build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        # 定义要并行构建的仓库配置
        repo_config: 
          - immwrt
          - openwrt
          - libwrt
        # 芯片系列 - 暂时注释掉ipq80xx，只保留ipq60xx
        chip_family:
          - ipq60xx
          # - ipq80xx  # 暂时注释，还没有扩展计划
    
    # 使用环境变量设置芯片系列和仓库配置
    env:
      CHIP_FAMILY: ${{ matrix.chip_family }}
      REPO_CONFIG: ${{ matrix.repo_config }}
      
    steps:

    - name: 初始化环境
      id: init_env
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        # 设置日志函数
        log() {
          echo -e "\033[1;34m[INFO]\033[0m $1"
        }
        
        error() {
          echo -e "\033[1;31m[ERROR]\033[0m $1" >&2
          exit 1
        }
        
        warning() {
          echo -e "\033[1;33m[WARNING]\033[0m $1"
        }
        
        log "更新系统包..."
        sudo -E apt-get -y update || error "更新系统包失败"
        
        log "安装依赖..."
        sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204) || error "安装依赖失败"
        
        log "配置时区..."
        sudo -E systemctl daemon-reload || warning "重载系统服务失败"
        sudo timedatectl set-timezone "$TZ" || warning "设置时区失败"
        
        log "环境初始化完成"

    - name: 检出代码
      uses: actions/checkout@main

    - name: 读取仓库配置
      id: read_repo_config
      run: |
        # 设置日志函数
        log() {
          echo -e "\033[1;34m[INFO]\033[0m $1"
        }
        
        error() {
          echo -e "\033[1;31m[ERROR]\033[0m $1" >&2
          exit 1
        }
        
        # 检查仓库配置文件是否存在
        if [ ! -f "${CONFIG_BASE_DIR}/repos.json" ]; then
          error "仓库配置文件 ${CONFIG_BASE_DIR}/repos.json 不存在"
        fi
        
        # 从JSON文件中读取仓库配置
        REPO_INFO=$(jq -r --arg repo "$REPO_CONFIG" '.[$repo]' ${CONFIG_BASE_DIR}/repos.json)
        
        if [ "$REPO_INFO" = "null" ]; then
          error "未找到仓库配置: $REPO_CONFIG"
        fi
        
        REPO_URL=$(echo "$REPO_INFO" | jq -r '.url')
        REPO_BRANCH=$(echo "$REPO_INFO" | jq -r '.branch')
        REPO_SHORT=$(echo "$REPO_INFO" | jq -r '.short')
        
        echo "REPO_URL=$REPO_URL" >> $GITHUB_ENV
        echo "REPO_BRANCH=$REPO_BRANCH" >> $GITHUB_ENV
        echo "REPO_SHORT=$REPO_SHORT" >> $GITHUB_ENV
        
        log "使用仓库: $REPO_URL"
        log "使用分支: $REPO_BRANCH"
        log "仓库简称: $REPO_SHORT"

    - name: 克隆源代码
      id: clone_source
      run: |
        # 设置日志函数
        log() {
          echo -e "\033[1;34m[INFO]\033[0m $1"
        }
        
        error() {
          echo -e "\033[1;31m[ERROR]\033[0m $1" >&2
          exit 1
        }
        
        warning() {
          echo -e "\033[1;33m[WARNING]\033[0m $1"
        }
        
        log "检查磁盘空间..."
        df -hT $GITHUB_WORKSPACE
        
        log "创建工作目录..."
        sudo mkdir -p $OPENWRT_PATH || error "创建工作目录失败"
        sudo chown -R $(id -u):$(id -g) $OPENWRT_PATH || error "设置工作目录权限失败"
        
        log "克隆源代码..."
        git clone --depth 1 -b $REPO_BRANCH --single-branch $REPO_URL $OPENWRT_PATH || error "克隆源代码失败"
        
        cd $OPENWRT_PATH
        
        log "获取版本信息..."
        VERSION_INFO=$(git show -s --date=short --format="作者: %an<br/>时间: %cd<br/>内容: %s<br/>hash: %H")
        echo "VERSION_INFO=$VERSION_INFO" >> $GITHUB_ENV
        
        # 尝试获取内核版本，如果失败则设为未知
        VERSION_KERNEL=$(grep -oP 'LINUX_KERNEL_HASH-\K[0-9]+\.[0-9]+\.[0-9]+' target/linux/generic/kernel-6.12 2>/dev/null || echo "未知")
        echo "VERSION_KERNEL=$VERSION_KERNEL" >> $GITHUB_ENV
        
        log "源代码克隆完成"

    - name: 生成变量
      id: generate_vars
      run: |
        # 设置日志函数
        log() {
          echo -e "\033[1;34m[INFO]\033[0m $1"
        }
        
        error() {
          echo -e "\033[1;31m[ERROR]\033[0m $1" >&2
          exit 1
        }
        
        log "设置配置文件路径..."
        CONFIG_BASE="${CONFIG_BASE_DIR}/base_${CHIP_FAMILY}.config"
        CONFIG_BRANCH="${CONFIG_BASE_DIR}/base_${REPO_SHORT}.config"
        DIY_SCRIPT="${DIY_SCRIPT_DIR}/diy.sh"
        REPO_SCRIPT="${DIY_SCRIPT_DIR}/repo.sh"
        
        echo "CONFIG_BASE=$CONFIG_BASE" >> $GITHUB_ENV
        echo "CONFIG_BRANCH=$CONFIG_BRANCH" >> $GITHUB_ENV
        echo "DIY_SCRIPT=$DIY_SCRIPT" >> $GITHUB_ENV
        echo "REPO_SCRIPT=$REPO_SCRIPT" >> $GITHUB_ENV
        
        log "检查配置文件是否存在..."
        if [ ! -f "$CONFIG_BASE" ]; then
          error "基础配置文件 $CONFIG_BASE 不存在"
        fi
        
        if [ ! -f "$CONFIG_BRANCH" ]; then
          error "分支配置文件 $CONFIG_BRANCH 不存在"
        fi
        
        log "提取设备信息..."
        cp $CONFIG_BASE $OPENWRT_PATH/.config || error "复制配置文件失败"
        cd $OPENWRT_PATH
        
        log "运行defconfig..."
        make defconfig > /dev/null 2>&1 || error "运行defconfig失败"
        
        SOURCE_REPO="$(echo $REPO_URL | awk -F '/' '{print $(NF)}')"
        echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
        
        DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
        echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
        
        DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
        echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
        
        # 提取设备名称
        log "提取设备名称..."
        DEVICE_NAMES=$(grep -oP "CONFIG_TARGET_DEVICE_.*_${CHIP_FAMILY}_DEVICE_\K[^=]+" $CONFIG_BASE | tr '\n' ' ')
        echo "DEVICE_NAMES=$DEVICE_NAMES" >> $GITHUB_ENV
        
        log "设备名称: $DEVICE_NAMES"
        
        echo "HASH=$(git log -1 --pretty=format:'%h')" >> $GITHUB_ENV
        echo "CACHE_DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        
        log "变量生成完成"

    - name: 缓存工具链
      uses: actions/cache@main
      with:
        key: ${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.HASH }}-${{ env.CACHE_DATE }}
        restore-keys: ${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-
        path: |
          ${{ env.OPENWRT_PATH }}/.ccache
          ${{ env.OPENWRT_PATH }}/staging_dir

    - name: 刷新缓存
      run: |
        # 设置日志函数
        log() {
          echo -e "\033[1;34m[INFO]\033[0m $1"
        }
        
        warning() {
          echo -e "\033[1;33m[WARNING]\033[0m $1"
        }
        
        log "刷新缓存..."
        if [ -d "$OPENWRT_PATH/staging_dir" ]; then
          find "$OPENWRT_PATH/staging_dir" -type d -name "stamp" -not -path "*target*" | while read -r dir; do
              find "$dir" -type f -exec touch {} +
          done
          log "缓存刷新完成"
        else
          log "未找到staging_dir，跳过缓存刷新"
        fi

    - name: 添加第三方软件源
      run: |
        # 设置日志函数
        log() {
          echo -e "\033[1;34m[INFO]\033[0m $1"
        }
        
        error() {
          echo -e "\033[1;31m[ERROR]\033[0m $1" >&2
          exit 1
        }
        
        warning() {
          echo -e "\033[1;33m[WARNING]\033[0m $1"
        }
        
        if [ -f "$REPO_SCRIPT" ]; then
          log "执行软件源脚本..."
          chmod +x $REPO_SCRIPT || error "设置脚本权限失败"
          cd $OPENWRT_PATH
          $GITHUB_WORKSPACE/$REPO_SCRIPT || error "执行软件源脚本失败"
        else
          warning "软件源脚本 $REPO_SCRIPT 不存在，跳过"
        fi

    - name: 安装Feeds
      run: |
        # 设置日志函数
        log() {
          echo -e "\033[1;34m[INFO]\033[0m $1"
        }
        
        error() {
          echo -e "\033[1;31m[ERROR]\033[0m $1" >&2
          exit 1
        }
        
        cd $OPENWRT_PATH
        log "更新feeds..."
        ./scripts/feeds update -a || error "更新feeds失败"
        
        log "安装feeds..."
        ./scripts/feeds install -a || error "安装feeds失败"

    - name: 加载自定义配置
      run: |
        # 设置日志函数
        log() {
          echo -e "\033[1;34m[INFO]\033[0m $1"
        }
        
        error() {
          echo -e "\033[1;31m[ERROR]\033[0m $1" >&2
          exit 1
        }
        
        warning() {
          echo -e "\033[1;33m[WARNING]\033[0m $1"
        }
        
        if [ -f "$DIY_SCRIPT" ]; then
          log "执行自定义脚本..."
          chmod +x $DIY_SCRIPT || error "设置脚本权限失败"
          cd $OPENWRT_PATH
          $GITHUB_WORKSPACE/$DIY_SCRIPT || error "执行自定义脚本失败"
        else
          warning "自定义脚本 $DIY_SCRIPT 不存在，跳过"
        fi

    - name: 合并配置文件并生成报告
      id: merge_config
      run: |
        # 设置日志函数
        log() {
          echo -e "\033[1;34m[INFO]\033[0m $1"
        }
        
        error() {
          echo -e "\033[1;31m[ERROR]\033[0m $1" >&2
          exit 1
        }
        
        log "合并配置文件..."
        
        # 保存合并前的luci软件包列表
        log "生成合并前的luci软件包报告..."
        LUCI_BEFORE=$(grep "^CONFIG_PACKAGE_luci.*=y" $CONFIG_BASE | sort)
        
        # 合并配置文件
        cat $CONFIG_BASE $CONFIG_BRANCH > $OPENWRT_PATH/.config || error "合并配置文件失败"
        
        # 保存合并后的luci软件包列表
        log "生成合并后的luci软件包报告..."
        LUCI_AFTER=$(grep "^CONFIG_PACKAGE_luci.*=y" $OPENWRT_PATH/.config | sort)
        
        # 生成差异报告
        log "生成luci软件包差异报告..."
        {
          echo "## Luci软件包合并报告"
          echo ""
          echo "### 新增的Luci软件包:"
          comm -13 <(echo "$LUCI_BEFORE") <(echo "$LUCI_AFTER") | sed 's/^CONFIG_PACKAGE_//' | sed 's/=y//' | while read pkg; do
            echo "- ✅ $pkg"
          done
          echo ""
          echo "### 缺失的Luci软件包:"
          comm -23 <(echo "$LUCI_BEFORE") <(echo "$LUCI_AFTER") | sed 's/^CONFIG_PACKAGE_//' | sed 's/=y//' | while read pkg; do
            echo "- ❌ $pkg"
          done
          echo ""
        } > $GITHUB_WORKSPACE/luci_report.md
        
        # 显示报告
        cat $GITHUB_WORKSPACE/luci_report.md
        
        log "运行defconfig..."
        cd $OPENWRT_PATH
        make defconfig || error "运行defconfig失败"
        
        # 保存defconfig后的luci软件包列表
        log "生成defconfig后的luci软件包报告..."
        LUCI_DEFCONFIG=$(grep "^CONFIG_PACKAGE_luci.*=y" $OPENWRT_PATH/.config | sort)
        
        # 生成defconfig后的差异报告
        log "生成defconfig后的luci软件包差异报告..."
        {
          echo "## Luci软件包defconfig报告"
          echo ""
          echo "### defconfig后新增的Luci软件包:"
          comm -13 <(echo "$LUCI_AFTER") <(echo "$LUCI_DEFCONFIG") | sed 's/^CONFIG_PACKAGE_//' | sed 's/=y//' | while read pkg; do
            echo "- ✅ $pkg"
          done
          echo ""
          echo "### defconfig后缺失的Luci软件包:"
          comm -23 <(echo "$LUCI_AFTER") <(echo "$LUCI_DEFCONFIG") | sed 's/^CONFIG_PACKAGE_//' | sed 's/=y//' | while read pkg; do
            echo "- ❌ $pkg"
          done
          echo ""
        } > $GITHUB_WORKSPACE/luci_defconfig_report.md
        
        # 显示报告
        cat $GITHUB_WORKSPACE/luci_defconfig_report.md
        
        log "配置文件合并和defconfig完成"

    - name: 下载DL软件包
      run: |
        # 设置日志函数
        log() {
          echo -e "\033[1;34m[INFO]\033[0m $1"
        }
        
        error() {
          echo -e "\033[1;31m[ERROR]\033[0m $1" >&2
          exit 1
        }
        
        cd $OPENWRT_PATH
        log "下载软件包..."
        make download -j$(nproc) || error "下载软件包失败"

    - name: 编译基础环境
      id: compile
      run: |
        # 设置日志函数
        log() {
          echo -e "\033[1;34m[INFO]\033[0m $1"
        }
        
        error() {
          echo -e "\033[1;31m[ERROR]\033[0m $1" >&2
          exit 1
        }
        
        warning() {
          echo -e "\033[1;33m[WARNING]\033[0m $1"
        }
        
        cd $OPENWRT_PATH
        log "开始编译基础环境..."
        log "使用 $(nproc) 个线程编译"
        
        # 尝试并行编译，如果失败则尝试单线程编译
        make -j$(nproc) || {
          warning "并行编译失败，尝试单线程编译..."
          make -j1 || {
            error "编译失败，尝试详细输出..."
            make -j1 V=s || error "编译彻底失败"
          }
        }
        
        echo "status=success" >> $GITHUB_OUTPUT
        echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV
        
        log "基础环境编译完成"

    - name: 检查空间使用情况
      if: (!cancelled())
      run: |
        # 设置日志函数
        log() {
          echo -e "\033[1;34m[INFO]\033[0m $1"
        }
        
        log "检查磁盘空间使用情况..."
        df -hT

    - name: 上传Bin目录
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.SOURCE_REPO }}-bin-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
        path: ${{ env.OPENWRT_PATH }}/bin

    - name: 整理文件
      if: steps.compile.outputs.status == 'success'
      run: |
        # 设置日志函数
        log() {
          echo -e "\033[1;34m[INFO]\033[0m $1"
        }
        
        log "整理文件..."
        cd $OPENWRT_PATH/bin/targets/*/*
        
        # 创建基础环境标识文件
        echo "基础环境构建信息" > base_build_info.txt
        echo "芯片系列: $CHIP_FAMILY" >> base_build_info.txt
        echo "仓库配置: $REPO_CONFIG" >> base_build_info.txt
        echo "源码分支: $REPO_BRANCH" >> base_build_info.txt
        echo "构建时间: $DATE" >> base_build_info.txt
        echo "内核版本: $VERSION_KERNEL" >> base_build_info.txt
        echo "设备名称: $DEVICE_NAMES" >> base_build_info.txt
        
        # 保存配置文件
        cp $OPENWRT_PATH/.config base_${CHIP_FAMILY}_${REPO_SHORT}.config
        
        log "文件整理完成"

    - name: 上传基础环境到Artifact
      if: steps.compile.outputs.status == 'success'
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.SOURCE_REPO }}-base-${{ env.CHIP_FAMILY }}-${{ env.REPO_SHORT }}-${{ env.FILE_DATE }}
        path: |
          ${{ env.OPENWRT_PATH }}/bin
          ${{ env.OPENWRT_PATH }}/.config
          ${{ env.OPENWRT_PATH }}/staging_dir
          ${{ env.OPENWRT_PATH }}/.ccache
        retention-days: 30

    - name: 删除旧缓存
      run: |
        # 设置日志函数
        log() {
          echo -e "\033[1;34m[INFO]\033[0m $1"
        }
        
        warning() {
          echo -e "\033[1;33m[WARNING]\033[0m $1"
        }
        
        log "清理旧缓存..."
        # 获取缓存列表并删除
        gh cache list --key ${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}- --json key --jq '.[] | .key' | while read -r key; do
          gh cache delete "$key" || warning "删除缓存 $key 失败"
        done
        
        # 输出缓存状态
        log "当前缓存状态:"
        echo "ccache: $(du -sh $OPENWRT_PATH/.ccache 2>/dev/null | cut -f 1 || echo "未找到")"
        echo "staging: $(du -sh $OPENWRT_PATH/staging_dir 2>/dev/null | cut -f 1 || echo "未找到")"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
