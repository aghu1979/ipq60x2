name: IPQ60xx 固件编译

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: '发布标签（留空则自动生成）'
        required: false
        type: string
  push:
    branches: [ main, master ]
  schedule:
    - cron: '0 2 * * 1'  # 每周一凌晨2点自动编译

env:
  # 主仓库地址（包含配置文件）
  MAIN_REPO_OWNER: aghu1979
  MAIN_REPO_NAME: ipq60x2
  MAIN_REPO_BRANCH: main
  CONFIGS_DIR: configs
  SCRIPTS_DIR: scripts
  OUTPUT_DIR: output
  RELEASE_NAME: IPQ60xx-Firmware
  # 芯片配置（避免硬编码）
  CHIP_SUBTARGET: ipq60xx
  # 缓存配置
  CACHE_VERSION: v3

jobs:
  # 准备阶段：获取配置和设备信息
  prepare:
    runs-on: ubuntu-24.04
    outputs:
      devices: ${{ steps.extract_devices.outputs.devices }}
      build_date: ${{ steps.set_date.outputs.date }}
      release_tag: ${{ steps.set_tag.outputs.tag }}
      repos_info: ${{ steps.get_repos.outputs.repos }}
      config_hash: ${{ steps.calc_hash.outputs.hash }}
      cache_key_base: ${{ steps.calc_hash.outputs.cache_key_base }}
      cache_key_chip: ${{ steps.calc_hash.outputs.cache_key_chip }}
    steps:
      - name: 检出主仓库
        uses: actions/checkout@v4
        with:
          repository: ${{ env.MAIN_REPO_OWNER }}/${{ env.MAIN_REPO_NAME }}
          ref: ${{ env.MAIN_REPO_BRANCH }}

      - name: 设置环境变量
        id: set_date
        run: |
          echo "date=$(date +'%Y.%m.%d')" >> $GITHUB_OUTPUT

      - name: 设置发布标签
        id: set_tag
        run: |
          if [ -n "${{ github.event.inputs.release_tag }}" ]; then
            echo "tag=${{ github.event.inputs.release_tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT
          fi

      - name: 获取仓库信息
        id: get_repos
        run: |
          # 读取repos.json并输出
          echo "repos<<EOF" >> $GITHUB_OUTPUT
          cat ${{ env.CONFIGS_DIR }}/repos.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 计算配置文件哈希值
        id: calc_hash
        run: |
          # 计算所有配置文件的组合哈希
          CONFIG_HASH=$(find ${{ env.CONFIGS_DIR }} -type f -name "*.config" -exec sha256sum {} \; | sort | sha256sum | cut -d' ' -f1)
          # 计算芯片基础配置哈希（用于跨分支缓存）
          CHIP_HASH=$(sha256sum ${{ env.CONFIGS_DIR }}/base_${{ env.CHIP_SUBTARGET }}.config | cut -d' ' -f1)
          
          echo "hash=$CONFIG_HASH" >> $GITHUB_OUTPUT
          echo "cache_key_base=${{ env.CACHE_VERSION }}-${{ runner.os }}-${CONFIG_HASH}" >> $GITHUB_OUTPUT
          echo "cache_key_chip=${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ env.CHIP_SUBTARGET }}-${CHIP_HASH}" >> $GITHUB_OUTPUT
          echo "配置文件哈希: $CONFIG_HASH"
          echo "芯片配置哈希: $CHIP_HASH"

      - name: 提取设备名称
        id: extract_devices
        run: |
          python3 << 'EOF'
          import re
          import os
          
          # 从环境变量获取配置
          config_dir = os.environ.get('CONFIGS_DIR')
          chip_subtarget = os.environ.get('CHIP_SUBTARGET')
          
          # 构建配置文件路径
          base_config = f"{config_dir}/base_{chip_subtarget}.config"
          
          # 读取芯片基础配置
          with open(base_config, 'r') as f:
              content = f.read()
          
          # 使用变量构建正则表达式
          pattern = rf'CONFIG_TARGET_DEVICE_qualcommax_{chip_subtarget}_DEVICE_(.+?)=y'
          devices = re.findall(pattern, content)
          
          # 输出JSON格式
          import json
          print(f"devices={json.dumps(devices)}")
          EOF

  # 第一阶段：并行编译Ultra变体
  build-ultra:
    needs: prepare
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        branch: [immwrt, libwrt, openwrt]
    steps:
      - name: 检出主仓库
        uses: actions/checkout@v4
        with:
          repository: ${{ env.MAIN_REPO_OWNER }}/${{ env.MAIN_REPO_NAME }}
          ref: ${{ env.MAIN_REPO_BRANCH }}

      - name: 安装依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential ccache ecj fastjar file g++ gawk \
            gettext git java-propose-classpath libelf-dev \
            libncurses5-dev libncursesw5-dev libssl-dev \
            python3 unzip wget python3-setuptools \
            python3-dev rsync subversion swig time xsltproc zlib1g-dev \
            python3-pyelftools jq

      - name: 设置缓存
        uses: actions/cache@v4
        with:
          path: |
            .ccache
            openwrt/dl
            openwrt/staging_dir
            openwrt/build_dir
            openwrt/tmp
          # 优先级1：精确匹配（配置哈希+分支+变体）
          key: ${{ needs.prepare.outputs.cache_key_base }}-ultra-${{ matrix.branch }}
          restore-keys: |
            # 优先级2：同分支不同变体
            ${{ needs.prepare.outputs.cache_key_base }}-${{ matrix.branch }}-
            # 优先级3：同芯片不同分支（Luci包通用性高）
            ${{ needs.prepare.outputs.cache_key_chip }}-ultra-
            # 优先级4：同芯片不同分支不同变体
            ${{ needs.prepare.outputs.cache_key_chip }}-
            # 优先级5：同芯片通用缓存
            ${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ env.CHIP_SUBTARGET }}-
            # 优先级6：系统级缓存
            ${{ env.CACHE_VERSION }}-${{ runner.os }}-

      - name: 初始化编译环境
        run: |
          # 设置环境变量
          export CCACHE_DIR=$PWD/.ccache
          export CCACHE_COMPRESS=1
          export CCACHE_MAXSIZE=20G
          export CONFIG_BRANCH=${{ matrix.branch }}
          export CONFIG_VARIANT=Ultra
          export OUTPUT_DIR=${{ env.OUTPUT_DIR }}/${{ matrix.branch }}-ultra
          export CHIP_SUBTARGET=${{ env.CHIP_SUBTARGET }}
          
          # 创建输出目录
          mkdir -p $OUTPUT_DIR
          mkdir -p .ccache
          
          # 根据repos.json中的信息克隆对应的源码
          REPO_INFO=$(echo '${{ needs.prepare.outputs.repos_info }}' | jq -r ".${{ matrix.branch }}")
          REPO_URL=$(echo "$REPO_INFO" | jq -r '.url')
          REPO_BRANCH=$(echo "$REPO_INFO" | jq -r '.branch')
          REPO_SHORT=$(echo "$REPO_INFO" | jq -r '.short')
          
          echo "克隆仓库: $REPO_URL"
          echo "使用分支: $REPO_BRANCH"
          echo "简称: $REPO_SHORT"
          
          # 克隆源码仓库
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          cd openwrt
          
          # 复制脚本文件到源码目录
          cp -r ../${{ env.SCRIPTS_DIR }} ./
          cp -r ../${{ env.CONFIGS_DIR }} ./
          
          # 执行初始化脚本
          chmod +x ${SCRIPTS_DIR}/*.sh
          ${SCRIPTS_DIR}/repo.sh
          ${SCRIPTS_DIR}/diy.sh

      - name: 合并配置文件
        run: |
          cd openwrt
          export CONFIG_BRANCH=${{ matrix.branch }}
          export CONFIG_VARIANT=Ultra
          export OUTPUT_DIR=${{ env.OUTPUT_DIR }}/${{ matrix.branch }}-ultra
          export CHIP_SUBTARGET=${{ env.CHIP_SUBTARGET }}
          
          # 确保输出目录存在
          mkdir -p $OUTPUT_DIR
          
          # 清理旧配置
          rm -f .config
          
          # 合并配置
          ${SCRIPTS_DIR}/merge_config.sh \
            ${CONFIGS_DIR}/base_${CHIP_SUBTARGET}.config \
            ${CONFIGS_DIR}/base_${CONFIG_BRANCH}.config \
            ${CONFIGS_DIR}/${CONFIG_VARIANT}.config \
            .config
          
          # 补全配置
          make defconfig
          
          # 生成Luci包报告（补全后）
          ${SCRIPTS_DIR}/luci_report.sh .config $OUTPUT_DIR/luci_report_after.txt

      - name: 下载软件包
        run: |
          cd openwrt
          make download -j$(nproc)
          find dl -size -1024c -exec ls -l {} \;

      - name: 编译固件
        run: |
          cd openwrt
          make -j$(nproc) || make -j1 V=s
          
          # 复制编译产物
          export OUTPUT_DIR=${{ env.OUTPUT_DIR }}/${{ matrix.branch }}-ultra
          export CHIP_SUBTARGET=${{ env.CHIP_SUBTARGET }}
          mkdir -p $OUTPUT_DIR
          cp bin/targets/qualcommax/${CHIP_SUBTARGET}/* $OUTPUT_DIR/ 2>/dev/null || true
          cp bin/packages/* $OUTPUT_DIR/packages/ 2>/dev/null || true

      - name: 上传编译产物
        uses: actions/upload-artifact@v4
        with:
          name: ultra-${{ matrix.branch }}
          path: ${{ env.OUTPUT_DIR }}/${{ matrix.branch }}-ultra/
          retention-days: 7

  # 第二阶段：编译Max和Pro变体
  build-others:
    needs: [prepare, build-ultra]
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        variant: [Max, Pro]
        branch: [immwrt, libwrt, openwrt]
    steps:
      - name: 检出主仓库
        uses: actions/checkout@v4
        with:
          repository: ${{ env.MAIN_REPO_OWNER }}/${{ env.MAIN_REPO_NAME }}
          ref: ${{ env.MAIN_REPO_BRANCH }}

      - name: 下载Ultra编译产物
        uses: actions/download-artifact@v4
        with:
          name: ultra-${{ matrix.branch }}
          path: ${{ env.OUTPUT_DIR }}/${{ matrix.branch }}-ultra/

      - name: 设置缓存
        uses: actions/cache@v4
        with:
          path: |
            .ccache
            openwrt/dl
            openwrt/staging_dir
            openwrt/build_dir
            openwrt/tmp
          # 优先级1：精确匹配（配置哈希+分支+变体）
          key: ${{ needs.prepare.outputs.cache_key_base }}-${{ matrix.variant }}-${{ matrix.branch }}
          restore-keys: |
            # 优先级2：同分支的Ultra缓存（优先使用已编译的Ultra）
            ${{ needs.prepare.outputs.cache_key_base }}-ultra-${{ matrix.branch }}
            # 优先级3：同分支不同变体
            ${{ needs.prepare.outputs.cache_key_base }}-${{ matrix.branch }}-
            # 优先级4：同芯片不同分支的Ultra缓存
            ${{ needs.prepare.outputs.cache_key_chip }}-ultra-
            # 优先级5：同芯片不同分支不同变体
            ${{ needs.prepare.outputs.cache_key_chip }}-
            # 优先级6：同芯片通用缓存
            ${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ env.CHIP_SUBTARGET }}-
            # 优先级7：系统级缓存
            ${{ env.CACHE_VERSION }}-${{ runner.os }}-

      - name: 编译${{ matrix.variant }}变体
        run: |
          # 设置环境变量
          export CCACHE_DIR=$PWD/.ccache
          export CCACHE_COMPRESS=1
          export CCACHE_MAXSIZE=20G
          export CONFIG_BRANCH=${{ matrix.branch }}
          export CONFIG_VARIANT=${{ matrix.variant }}
          export OUTPUT_DIR=${{ env.OUTPUT_DIR }}/${{ matrix.branch }}-${{ matrix.variant }}
          export CHIP_SUBTARGET=${{ env.CHIP_SUBTARGET }}
          
          # 创建输出目录
          mkdir -p $OUTPUT_DIR
          mkdir -p .ccache
          
          # 如果存在Ultra编译环境，直接使用
          if [ -d "openwrt" ]; then
            echo "使用现有编译环境"
          else
            # 根据repos.json中的信息克隆对应的源码
            REPO_INFO=$(echo '${{ needs.prepare.outputs.repos_info }}' | jq -r ".${{ matrix.branch }}")
            REPO_URL=$(echo "$REPO_INFO" | jq -r '.url')
            REPO_BRANCH=$(echo "$REPO_INFO" | jq -r '.branch')
            
            echo "克隆仓库: $REPO_URL"
            echo "使用分支: $REPO_BRANCH"
            
            # 克隆源码仓库
            git clone $REPO_URL -b $REPO_BRANCH openwrt
            cd openwrt
            
            # 复制脚本文件到源码目录
            cp -r ../${{ env.SCRIPTS_DIR }} ./
            cp -r ../${{ env.CONFIGS_DIR }} ./
            
            # 执行初始化脚本
            chmod +x ${SCRIPTS_DIR}/*.sh
            ${SCRIPTS_DIR}/repo.sh
            ${SCRIPTS_DIR}/diy.sh
            cd ..
          fi
          
          cd openwrt
          
          # 合并配置
          ${SCRIPTS_DIR}/merge_config.sh \
            ${CONFIGS_DIR}/base_${CHIP_SUBTARGET}.config \
            ${CONFIGS_DIR}/base_${CONFIG_BRANCH}.config \
            ${CONFIGS_DIR}/${CONFIG_VARIANT}.config \
            .config
          
          # 补全配置
          make defconfig
          
          # 只编译差异部分
          make -j$(nproc) || make -j1 V=s
          
          # 复制编译产物
          mkdir -p $OUTPUT_DIR
          cp bin/targets/qualcommax/${CHIP_SUBTARGET}/* $OUTPUT_DIR/ 2>/dev/null || true
          cp bin/packages/* $OUTPUT_DIR/packages/ 2>/dev/null || true

      - name: 上传编译产物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.variant }}-${{ matrix.branch }}
          path: ${{ env.OUTPUT_DIR }}/${{ matrix.branch }}-${{ matrix.variant }}/
          retention-days: 7

  # 设备重命名和发布
  release:
    needs: [prepare, build-others]
    runs-on: ubuntu-24.04
    if: github.event_name != 'pull_request'
    steps:
      - name: 检出主仓库
        uses: actions/checkout@v4
        with:
          repository: ${{ env.MAIN_REPO_OWNER }}/${{ env.MAIN_REPO_NAME }}
          ref: ${{ env.MAIN_REPO_BRANCH }}

      - name: 下载所有编译产物
        uses: actions/download-artifact@v4
        with:
          path: ${{ env.OUTPUT_DIR }}/

      - name: 设备重命名
        run: |
          # 为每个设备重命名固件
          for device in $(echo '${{ needs.prepare.outputs.devices }}' | jq -r '.[]'); do
            echo "处理设备: $device"
            
            # 重命名各分支的固件
            for branch in immwrt libwrt openwrt; do
              for variant in Ultra Max Pro; do
                src_dir="${{ env.OUTPUT_DIR }}/${variant}-${branch}"
                if [ -d "$src_dir" ]; then
                  ${{ env.SCRIPTS_DIR }}/device_rename.sh \
                    "$src_dir" \
                    "$device" \
                    "${{ env.RELEASE_NAME }}-${variant}-${branch}-${device}-${{ needs.prepare.outputs.build_date }}"
                fi
              done
            done
          done

      - name: 生成发布说明
        run: |
          cat > ${{ env.OUTPUT_DIR }}/RELEASE.md << 'EOF'
          # IPQ60xx 固件发布
          
          ## 发布信息
          - 发布日期: ${{ needs.prepare.outputs.build_date }}
          - 配置仓库: https://github.com/${{ env.MAIN_REPO_OWNER }}/${{ env.MAIN_REPO_NAME }}
          - 编译设备: ${{ join(needs.prepare.outputs.devices, ', ') }}
          - 配置哈希: ${{ needs.prepare.outputs.config_hash }}
          
          ## 源码仓库信息
          - ImmortalWrt: https://github.com/laipeng668/immortalwrt.git (master)
          - OpenWrt: https://github.com/laipeng668/openwrt.git (master)
          - LibWrt: https://github.com/laipeng668/openwrt-6.x.git (k6.12-nss)
          
          ## 变体说明
          - **Ultra**: 包含所有功能，适合高级用户
          - **Max**: 平衡功能和性能，适合大多数用户
          - **Pro**: 精简版本，适合路由器性能较低的场景
          
          ## 分支说明
          - **immwrt**: ImmortalWrt分支，包含更多自定义功能
          - **libwrt**: LibWrt分支，专注于稳定性
          - **openwrt**: 官方OpenWrt分支
          
          ## 使用说明
          1. 下载对应设备的固件文件
          2. 通过路由器后台升级固件
          3. 升级后恢复出厂设置
          
          ## 默认设置
          - IP地址: 192.168.111.1
          - 用户名: root
          - 密码: 空
          - 主机名: WRT
          
          ## 注意事项
          - 升级前请备份配置
          - 首次使用建议恢复出厂设置
          - 如有问题请提交Issue
          EOF

      - name: 创建发布
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare.outputs.release_tag }}
          name: ${{ env.RELEASE_NAME }} ${{ needs.prepare.outputs.release_tag }}
          body_path: ${{ env.OUTPUT_DIR }}/RELEASE.md
          files: ${{ env.OUTPUT_DIR }}/**/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
